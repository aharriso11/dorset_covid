"East of England_95% Lower credible interval pc",
"East of England_95% Upper credible interval pc",
"East of England_Modelled number of people testing positive for COVID-19",
"East of England_95% Lower credible interval nm",
"East of England_95% Upper credible interval nm",
"East of England_Modelled ratio of people testing positive for COVID-19",
"East of England_95% Lower credible interval ra",
"East of England_95% Upper credible interval ra",
"London_Modelled % testing positive for COVID-19",
"London_95% Lower credible interval pc",
"London_95% Upper credible interval pc",
"London_Modelled number of people testing positive for COVID-19",
"London_95% Lower credible interval nm",
"London_95% Upper credible interval nm",
"London_Modelled ratio of people testing positive for COVID-19",
"London_95% Lower credible interval ra",
"London_95% Upper credible interval ra",
"South East_Modelled % testing positive for COVID-19",
"South East_95% Lower credible interval pc",
"South East_95% Upper credible interval pc",
"South East_Modelled number of people testing positive for COVID-19",
"South East_95% Lower credible interval nm",
"South East_95% Upper credible interval nm",
"South East_Modelled ratio of people testing positive for COVID-19",
"South East_95% Lower credible interval ra",
"South East_95% Upper credible interval ra",
"South West_Modelled % testing positive for COVID-19",
"South West_95% Lower credible interval pc",
"South West_95% Upper credible interval pc",
"South West_Modelled number of people testing positive for COVID-19",
"South West_95% Lower credible interval nm",
"South West_95% Upper credible interval nm",
"South West_Modelled ratio of people testing positive for COVID-19",
"South West_95% Lower credible interval ra",
"South West_95% Upper credible interval ra"
)
# import data from downloaded file and replace the headers
df_region_daily <- read_excel("devel/onslatest.xlsx", sheet = "1f", skip = 6, col_names = region_headers)
# remove the last seven rows which are not useful
df_region_daily <- head(df_region_daily, -7)
# convert dates from numeric to Gregorian format
df_region_daily$Date <- convertToDate(df_region_daily$Date)
# convert data from wide to long and separate out region and metric columns
df_region_daily <- df_region_daily %>%
gather(METRIC, VALUE, -c("Date")) %>%
separate(METRIC, into = c("REGION", "METRIC"), sep = "_")
# subset the modelled daily case numbers
df_region_daily_numbers <- df_region_daily %>%
filter(METRIC %in% c("Modelled number of people testing positive for COVID-19", "95% Lower credible interval nm", "95% Upper credible interval nm"))
# convert values to numeric
df_region_daily_numbers$VALUE <- as.numeric(as.character(df_region_daily_numbers$VALUE))
# spread region numbers to give us separated figures for ribbon plot
df_region_daily_numbers_wide <- df_region_daily_numbers %>%
pivot_wider(names_from = METRIC, values_from = VALUE)
# get title dates
date_first <- format(head(df_region_daily_numbers$Date, 1), "%d %B")
date_last <- format(tail(df_region_daily_numbers$Date, 1), "%d %B")
# Rename columns
names(df_region_daily_numbers_wide)[names(df_region_daily_numbers_wide) == "95% Lower credible interval nm"] <- "ymin"
names(df_region_daily_numbers_wide)[names(df_region_daily_numbers_wide) == "95% Upper credible interval nm"] <- "ymax"
st2 <- paste("The modelled number of people in English regions testing positive for covid-19, from the ONS covid-19 infection survey.<br>
The lighter shaded area shows the <b>confidence interval</b> within which the actual number of infections might fall.<br>
This dataset was produced on <b> ", date_publication, " </b> and covers dates between ", date_first, " and ", date_last, ". The next update will be on <b>", date_next, "</b>.", sep = "")
# plot and geoms
df_plot_region_numbers <- ggplot() +
# Plot confidence interval as a ribbon
geom_ribbon(data = df_region_daily_numbers_wide, aes(x = Date, ymin = ymin, ymax = ymax), fill = "thistle1") +
# plot the modelled number and upper and lower intervals as xps lines
geom_xspline(data = subset(df_region_daily_numbers, METRIC == "Modelled number of people testing positive for COVID-19"), aes(x = Date, y = VALUE), stat = "xspline", size = 1.25, colour = "red4") +
geom_xspline(data = subset(df_region_daily_numbers, METRIC == "95% Lower credible interval nm"), aes(x = Date, y = VALUE), stat = "xspline", colour = "thistle3") +
geom_xspline(data = subset(df_region_daily_numbers, METRIC == "95% Upper credible interval nm"), aes(x = Date, y = VALUE), stat = "xspline", colour = "thistle3") +
# facet by area name
facet_wrap( ~ REGION, ncol = 3) +
# scale settings
scale_x_date(date_labels = "%d %b", date_breaks = "7 days") +
scale_y_continuous(labels = comma) +
# axis settings
xlab("Date") +
ylab("Modelled number of people testing positive for covid-19")+
# set title and subtitle
ggtitle("Modelled daily rates of the percentage of the population testing positive for covid-19 in English regions") +
labs(caption = paste("Data from the Office for National Statistics. Plotted", Sys.time(), sep = " ", "\nData plot by Andrew Harrison / https://aharriso11.github.io/dorset_covid"),
subtitle = paste0(st2)) +
# set theme
theme_base() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 20, family = "Helvetica", face = "bold"),
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 11),
plot.caption = element_text(size = 8),
legend.text = element_text(size = 12),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 8),
strip.text.x = element_text(size = 12),
strip.text.y = element_text(size = 12)
)
# generate the plot
df_plot_region_numbers
# save the plot
ggsave("output/ons_regions.png", width = 16.6, height = 8.65, units = "in", device = "png")
# generate the plot
print(df_plot_region_numbers)
# generate the plot
show(df_plot_region_numbers)
# save the plot
ggsave("output/ons_regions.png", width = 16.6, height = 8.65, units = "in", device = "png")
# generate the plot
show(df_plot_eng)
# save the plot
ggsave("output/ons_england.png", width = 16.6, height = 8.65, units = "in", device = "png")
# set working directory
setwd("~/Documents/GitHub/sandpit")
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
tidyverse,
zoo,
data.table,
scales,
glue,
ggtext,
ggthemes,
pals,
utils,
reshape,
lubridate,
rvest,
stringr,
ggalt,
janitor,
tidytuesdayR
)
# OBTAIN DATA ----
tuesdata <- tt_load('2022-02-22')
View(tuesdata)
freedom <- tuesdata$freedom
View(freedom)
# OBTAIN DATA ----
tuesdata <- tt_load('2022-03-08')
View(tuesdata)
erasmus <- tuesdata$erasmus
View(erasmus)
# set working directory
setwd("~/Documents/GitHub/sandpit")
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
httr,
readxl,
readODS,
tidyverse,
zoo,
data.table,
scales,
glue,
ggtext,
ggthemes,
pals,
utils,
reshape,
lubridate
)
# set mobility reports zipfile path
zip_path <- "https://files.digital.nhs.uk/A8/517962/SHMI%20data%20files%2C%20Nov20-Oct21.zip"
# set downloaded file path and name for downloaded data
file_name <- "temp/SHMI%20data%20files%2C%20Nov20-Oct21.zip"
# download the mobility report zipfile
GET(zip_path, write_disk(file_name, overwrite = TRUE))
# extract the GB data
unzip(file_name, files = c("SHMI Data/SHMI data at trust level, Nov20-Oct21 (csv).csv"), overwrite = TRUE, exdir = "./temp/")
unzip(file_name, list = TRUE)
# extract the GB data
unzip(file_name, files = c("SHMI data/SHMI data at trust level, Nov20-Oct21 (csv).csv"), overwrite = TRUE, exdir = "./temp/")
# download the mobility report zipfile
GET(zip_path, write_disk(file_name, overwrite = TRUE))
# extract the GB data
unzip(file_name, files = c("SHMI data/SHMI data at trust level, Nov20-Oct21 (csv).csv"), overwrite = TRUE, exdir = "./temp/", junkpaths = TRUE)
list.files(path = "*.csv")
# import the data
list.files(path = "*.csv")
# import the data
list.files(path = "*.*")
# import the data
list.files(path = ".")
# import the data
list.files(path = "./temp/*.csv")
# import the data
list.files(path = "./temp/")
# import the data
list.files(path = "./temp/", pattern = ".csv")
# import the data
files <- list.files(path = "./temp/", pattern = ".csv")
shmi <- read.csv(files[1])
shmi <- read.csv(paste0("temp/", files[1]))
View(shmi)
zip_path_2010_2011 <- "https://files.digital.nhs.uk/B1/30CE7B/SHMI%20data%20files%2C%20Apr10-Mar11.zip"
zip_path_2011_2012 <- "https://files.digital.nhs.uk/D9/A9CD1E/SHMI%20data%20files%2C%20Apr11-Mar12.zip"
zip_path_2012_2013 <- "https://files.digital.nhs.uk/DD/0862E7/SHMI%20data%20files%2C%20Apr12-Mar13.zip"
zip_path_2013_2014 <- "https://files.digital.nhs.uk/36/991301/SHMI%20data%20files%2C%20Apr13-Mar14.zip"
zip_path_2014_2015 <- "https://files.digital.nhs.uk/DD/54895D/SHMI%20data%20files%2C%20Apr14-Mar15.zip"
zip_path_2015_2016 <- "https://files.digital.nhs.uk/99/A1000C/SHMI%20data%20files%2C%20Apr15-Mar16.zip"
zip_path_2016_2017 <- "https://files.digital.nhs.uk/12/2EDA70/SHMI%20data%20files%2C%20Apr16-Mar17.zip"
zip_path_2017_2018 <- "https://files.digital.nhs.uk/AA/8C96CC/SHMI%20data%20files%2C%20Apr17-Mar18.zip"
zip_path_2018_2019 <- "https://files.digital.nhs.uk/E7/6314D8/SHMI%20data%20files%2C%20Apr18-Mar19.zip"
zip_path_2019_2020 <- "https://files.digital.nhs.uk/8C/4AADFC/SHMI%20data%20files%2C%20Apr19-Mar20.zip"
zip_path_2020_2021 <- "https://files.digital.nhs.uk/5F/CCBBB6/SHMI%20data%20files%2C%20Apr20-Mar21.zip"
zip_file_2010_2011 <- right(zip_path_2010_2011, 40)
# Use pacman to install (if req) and load required packages
pacman::p_load(
httr,
readxl,
readODS,
tidyverse,
zoo,
data.table,
scales,
glue,
ggtext,
ggthemes,
pals,
utils,
reshape,
lubridate,
stringr
)
zip_file_2010_2011 <- str_sub(zip_path_2010_2011, -40)
zip_file_2010_2011 <- str_sub(zip_path_2010_2011, -40)
zip_file_2011_2012 <- str_sub(zip_path_2011_2012, -40)
zip_file_2012_2013 <- str_sub(zip_path_2012_2013, -40)
zip_file_2013_2014 <- str_sub(zip_path_2013_2014, -40)
zip_file_2014_2015 <- str_sub(zip_path_2014_2015, -40)
zip_file_2015_2016 <- str_sub(zip_path_2015_2016, -40)
zip_file_2016_2017 <- str_sub(zip_path_2016_2017, -40)
zip_file_2017_2018 <- str_sub(zip_path_2017_2018, -40)
zip_file_2018_2019 <- str_sub(zip_path_2018_2019, -40)
zip_file_2019_2020 <- str_sub(zip_path_2019_2020, -40)
zip_file_2020_2021 <- str_sub(zip_path_2020_2021, -40)
files <- data.frame(
zip_path = c(zip_path_2010_2011, zip_path_2011_2012, zip_path_2012_2013, zip_path_2013_2014, zip_path_2014_2015, zip_path_2015_2016, zip_path_2016_2017, zip_path_2017_2018, zip_path_2018_2019, zip_path_2019_2020, zip_path_2020_2021),
zip_file = c(zip_file_2010_2011, zip_file_2011_2012, zip_file_2012_2013, zip_file_2013_2014, zip_file_2014_2015, zip_file_2015_2016, zip_file_2016_2017, zip_file_2017_2018, zip_file_2018_2019, zip_file_2019_2020, zip_file_2020_2021)
)
View(files)
# set working directory
setwd("~/Documents/GitHub/dorset_covid")
# set working directory
setwd("~/Documents/GitHub/dorset_covid")
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
httr,
readxl,
readODS,
tidyverse,
zoo,
data.table,
scales,
glue,
ggtext,
ggthemes,
pals,
utils,
reshape,
lubridate,
rvest,
stringr,
openxlsx,
ggalt,
janitor
)
# set url for web page containing link to the ONS survey data
page <- read_html(url("https://www.ons.gov.uk/peoplepopulationandcommunity/healthandsocialcare/conditionsanddiseases/datasets/coronaviruscovid19infectionsurveydata/2022"))
# extract all the URLs from the page
urls <- page %>%
html_nodes("a") %>%
html_attr("href")
# extract all the link names from the page
# not needed for the live script but useful for troubleshooting
links <- page %>%
html_nodes("a") %>%
html_text()
# merge these two into a data frame
df_links <- data.frame(
links = links,
urls = urls,
stringsAsFactors = FALSE)
# pass the data frame containing the links through two filters to get the url for the survey data
# we figure this out through trial, error and mk 1 eyeball
url <- df_links %>%
filter(str_detect(urls, "coronaviruscovid19infectionsurveydata/2022/2022"))
# because the ONS website uses relative paths for its links we must create an absolute path
downloadurl <- paste("https://www.ons.gov.uk", url$urls[1], sep="")
# download the survey file
GET(downloadurl, write_disk("devel/onslatest.xlsx", overwrite = TRUE))
# REPORT DATES ----
df_cover <- read_excel("devel/onslatest.xlsx", sheet = "Cover sheet", skip = 10)
date_publication <- strsplit((as.character(df_cover[7, ])), split = ": ")[[1]][[2]]
date_next <- strsplit((as.character(df_cover[8, ])), split = ": ")[[1]][[2]]
# import data from downloaded file
df_eng_daily <- read_excel("devel/onslatest.xlsx", sheet = "1b", skip = 4)
# convert dates from numeric to Gregorian format
df_eng_daily$Date <- convertToDate(df_eng_daily$Date)
# subset the modelled number of people and remove empty rows left from the import
df_eng_daily_number <-
subset(df_eng_daily, select = c("Date", "Modelled number of people testing positive for COVID-19", "95% Lower credible interval...6", "95% Upper credible interval...7")) %>%
remove_empty("rows")
# Rename columns
names(df_eng_daily_number)[names(df_eng_daily_number) == "95% Lower credible interval...6"] <- "ymin"
names(df_eng_daily_number)[names(df_eng_daily_number) == "95% Upper credible interval...7"] <- "ymax"
# get title dates
date_first <- format(head(df_eng_daily_number$Date, 1), "%d %B")
date_last <- format(tail(df_eng_daily_number$Date, 1), "%d %B")
# convert wide data into long
df_long <- gather(df_eng_daily_number, event, total, -c(Date))
st1 <- paste("The modelled number of people in England testing positive for covid-19, from the ONS covid-19 infection survey.<br>
The lighter shaded area shows the <b>confidence interval</b> within which the actual number of infections might fall.<br>
This dataset was produced on <b>", date_publication, "</b> and covers dates between ", date_first, " and ", date_last, ". The next update will be on <b>", date_next, "</b>.", sep = "")
# plot and geoms
df_plot_eng <- ggplot() +
# Plot confidence interval as a ribbon
geom_ribbon(data = df_eng_daily_number, aes(x = Date, ymin = ymin, ymax = ymax), fill = "thistle1") +
# plot the modelled number and upper and lower intervals as xps lines
geom_xspline(data = subset(df_long, event=="Modelled number of people testing positive for COVID-19"), aes(x = Date, y = total), stat = "xspline", size = 1.25, colour = "red4") +
geom_xspline(data = subset(df_long, event=="ymin"), aes(x = Date, y = total), stat = "xspline", colour = "thistle3") +
geom_xspline(data = subset(df_long, event=="ymax"), aes(x = Date, y = total), stat = "xspline", colour = "thistle3") +
# scale settings
scale_x_date(date_labels = "%d %b", date_breaks = "3 days") +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6, accuracy = 0.1), position = "right") +
# axis settings
xlab("Date") +
ylab("") +
# set title and subtitle
ggtitle("Modelled daily rates of the percentage of the population testing positive for covid-19 in England") +
labs(caption = paste("Data from the Office for National Statistics. Plotted", Sys.time(), sep = " ", "\nData plot by Andrew Harrison / https://aharriso11.github.io/dorset_covid"),
subtitle = paste0(st1)) +
# set theme
theme_base() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 20, family = "Helvetica", face = "bold"),
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 11),
plot.caption = element_text(size = 8),
legend.text = element_text(size = 12),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 8),
strip.text.x = element_text(size = 12),
strip.text.y = element_text(size = 12)
)
# generate the plot
show(df_plot_eng)
# save the plot
ggsave("output/ons_england.png", width = 16.6, height = 8.65, units = "in", device = "png")
# read in region headers as a vector
region_headers <- c(
"Date",
"North East_Modelled % testing positive for COVID-19",
"North East_95% Lower credible interval pc",
"North East_95% Upper credible interval pc",
"North East_Modelled number of people testing positive for COVID-19",
"North East_95% Lower credible interval nm",
"North East_95% Upper credible interval nm",
"North East_Modelled ratio of people testing positive for COVID-19",
"North East_95% Lower credible interval ra",
"North East_95% Upper credible interval ra",
"North West_Modelled % testing positive for COVID-19",
"North West_95% Lower credible interval pc",
"North West_95% Upper credible interval pc",
"North West_Modelled number of people testing positive for COVID-19",
"North West_95% Lower credible interval nm",
"North West_95% Upper credible interval nm",
"North West_Modelled ratio of people testing positive for COVID-19",
"North West_95% Lower credible interval ra",
"North West_95% Upper credible interval ra",
"Yorkshire and the Humber_Modelled % testing positive for COVID-19",
"Yorkshire and the Humber_95% Lower credible interval pc",
"Yorkshire and the Humber_95% Upper credible interval pc",
"Yorkshire and the Humber_Modelled number of people testing positive for COVID-19",
"Yorkshire and the Humber_95% Lower credible interval nm",
"Yorkshire and the Humber_95% Upper credible interval nm",
"Yorkshire and the Humber_Modelled ratio of people testing positive for COVID-19",
"Yorkshire and the Humber_95% Lower credible interval ra",
"Yorkshire and the Humber_95% Upper credible interval ra",
"East Midlands_Modelled % testing positive for COVID-19",
"East Midlands_95% Lower credible interval pc",
"East Midlands_95% Upper credible interval pc",
"East Midlands_Modelled number of people testing positive for COVID-19",
"East Midlands_95% Lower credible interval nm",
"East Midlands_95% Upper credible interval nm",
"East Midlands_Modelled ratio of people testing positive for COVID-19",
"East Midlands_95% Lower credible interval ra",
"East Midlands_95% Upper credible interval ra",
"West Midlands_Modelled % testing positive for COVID-19",
"West Midlands_95% Lower credible interval pc",
"West Midlands_95% Upper credible interval pc",
"West Midlands_Modelled number of people testing positive for COVID-19",
"West Midlands_95% Lower credible interval nm",
"West Midlands_95% Upper credible interval nm",
"West Midlands_Modelled ratio of people testing positive for COVID-19",
"West Midlands_95% Lower credible interval ra",
"West Midlands_95% Upper credible interval ra",
"East of England_Modelled % testing positive for COVID-19",
"East of England_95% Lower credible interval pc",
"East of England_95% Upper credible interval pc",
"East of England_Modelled number of people testing positive for COVID-19",
"East of England_95% Lower credible interval nm",
"East of England_95% Upper credible interval nm",
"East of England_Modelled ratio of people testing positive for COVID-19",
"East of England_95% Lower credible interval ra",
"East of England_95% Upper credible interval ra",
"London_Modelled % testing positive for COVID-19",
"London_95% Lower credible interval pc",
"London_95% Upper credible interval pc",
"London_Modelled number of people testing positive for COVID-19",
"London_95% Lower credible interval nm",
"London_95% Upper credible interval nm",
"London_Modelled ratio of people testing positive for COVID-19",
"London_95% Lower credible interval ra",
"London_95% Upper credible interval ra",
"South East_Modelled % testing positive for COVID-19",
"South East_95% Lower credible interval pc",
"South East_95% Upper credible interval pc",
"South East_Modelled number of people testing positive for COVID-19",
"South East_95% Lower credible interval nm",
"South East_95% Upper credible interval nm",
"South East_Modelled ratio of people testing positive for COVID-19",
"South East_95% Lower credible interval ra",
"South East_95% Upper credible interval ra",
"South West_Modelled % testing positive for COVID-19",
"South West_95% Lower credible interval pc",
"South West_95% Upper credible interval pc",
"South West_Modelled number of people testing positive for COVID-19",
"South West_95% Lower credible interval nm",
"South West_95% Upper credible interval nm",
"South West_Modelled ratio of people testing positive for COVID-19",
"South West_95% Lower credible interval ra",
"South West_95% Upper credible interval ra"
)
# import data from downloaded file and replace the headers
df_region_daily <- read_excel("devel/onslatest.xlsx", sheet = "1f", skip = 6, col_names = region_headers)
# remove the last seven rows which are not useful
df_region_daily <- head(df_region_daily, -7)
# convert dates from numeric to Gregorian format
df_region_daily$Date <- convertToDate(df_region_daily$Date)
# convert data from wide to long and separate out region and metric columns
df_region_daily <- df_region_daily %>%
gather(METRIC, VALUE, -c("Date")) %>%
separate(METRIC, into = c("REGION", "METRIC"), sep = "_")
# subset the modelled daily case numbers
df_region_daily_numbers <- df_region_daily %>%
filter(METRIC %in% c("Modelled number of people testing positive for COVID-19", "95% Lower credible interval nm", "95% Upper credible interval nm"))
# convert values to numeric
df_region_daily_numbers$VALUE <- as.numeric(as.character(df_region_daily_numbers$VALUE))
# spread region numbers to give us separated figures for ribbon plot
df_region_daily_numbers_wide <- df_region_daily_numbers %>%
pivot_wider(names_from = METRIC, values_from = VALUE)
# get title dates
date_first <- format(head(df_region_daily_numbers$Date, 1), "%d %B")
date_last <- format(tail(df_region_daily_numbers$Date, 1), "%d %B")
# Rename columns
names(df_region_daily_numbers_wide)[names(df_region_daily_numbers_wide) == "95% Lower credible interval nm"] <- "ymin"
names(df_region_daily_numbers_wide)[names(df_region_daily_numbers_wide) == "95% Upper credible interval nm"] <- "ymax"
st2 <- paste("The modelled number of people in English regions testing positive for covid-19, from the ONS covid-19 infection survey.<br>
The lighter shaded area shows the <b>confidence interval</b> within which the actual number of infections might fall.<br>
This dataset was produced on <b> ", date_publication, " </b> and covers dates between ", date_first, " and ", date_last, ". The next update will be on <b>", date_next, "</b>.", sep = "")
# plot and geoms
df_plot_region_numbers <- ggplot() +
# Plot confidence interval as a ribbon
geom_ribbon(data = df_region_daily_numbers_wide, aes(x = Date, ymin = ymin, ymax = ymax), fill = "thistle1") +
# plot the modelled number and upper and lower intervals as xps lines
geom_xspline(data = subset(df_region_daily_numbers, METRIC == "Modelled number of people testing positive for COVID-19"), aes(x = Date, y = VALUE), stat = "xspline", size = 1.25, colour = "red4") +
geom_xspline(data = subset(df_region_daily_numbers, METRIC == "95% Lower credible interval nm"), aes(x = Date, y = VALUE), stat = "xspline", colour = "thistle3") +
geom_xspline(data = subset(df_region_daily_numbers, METRIC == "95% Upper credible interval nm"), aes(x = Date, y = VALUE), stat = "xspline", colour = "thistle3") +
# facet by area name
facet_wrap( ~ REGION, ncol = 3) +
# scale settings
scale_x_date(date_labels = "%d %b", date_breaks = "7 days") +
scale_y_continuous(labels = comma) +
# axis settings
xlab("Date") +
ylab("Modelled number of people testing positive for covid-19")+
# set title and subtitle
ggtitle("Modelled daily rates of the percentage of the population testing positive for covid-19 in English regions") +
labs(caption = paste("Data from the Office for National Statistics. Plotted", Sys.time(), sep = " ", "\nData plot by Andrew Harrison / https://aharriso11.github.io/dorset_covid"),
subtitle = paste0(st2)) +
# set theme
theme_base() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 20, family = "Helvetica", face = "bold"),
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 11),
plot.caption = element_text(size = 8),
legend.text = element_text(size = 12),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 8),
strip.text.x = element_text(size = 12),
strip.text.y = element_text(size = 12)
)
# generate the plot
show(df_plot_region_numbers)
# save the plot
ggsave("output/ons_regions.png", width = 16.6, height = 8.65, units = "in", device = "png")
