hosp_bed <- hosp_bed %>%
filter(Code=="RBD" | Code=="R0D")
# All mechanical ventilation beds
hosp_bmv <- hosp_bmv %>%
filter(Code=="RBD" | Code=="R0D")
# All deaths
hosp_deaths <- hosp_deaths %>%
filter(Code=="RBD" | Code=="R0D")
# Convert wide data to long
hosp_ads <- gather(hosp_ads, hdate, hospads_number, "2021/04/07":"2021/10/31", na.rm = FALSE)
hosp_bed <- gather(hosp_bed, hdate, totalbeds_number, "2021/04/07":"2021/11/02", na.rm = FALSE)
hosp_bmv <- gather(hosp_bmv, hdate, mv_number, "2021/04/07":"2021/11/02", na.rm = FALSE)
hosp_deaths <- gather(hosp_deaths, hdate, death_number, "2020/03/01":"2021/11/07", na.rm = FALSE)
# define the date format
hosp_ads$hdate = as.Date(hosp_ads$hdate, "%Y/%m/%d")
hosp_bed$hdate = as.Date(hosp_bed$hdate, "%Y/%m/%d")
hosp_bmv$hdate = as.Date(hosp_bmv$hdate, "%Y/%m/%d")
hosp_deaths$hdate = as.Date(hosp_deaths$hdate, "%Y/%m/%d")
# Remove columns we don't need
hosp_ads <- subset(hosp_ads, hdate > today() - months(3), select = c("Code", "Name", "hdate", "hospads_number"))
hosp_bed <- subset(hosp_bed, hdate > today() - months(3), select = c("Code", "Name", "hdate", "totalbeds_number"))
hosp_bmv <- subset(hosp_bmv, hdate > today() - months(3), select = c("Code", "Name", "hdate", "mv_number"))
hosp_deaths <- subset(hosp_deaths, hdate > today() - months(3), select = c("Code", "Name", "hdate", "death_number"))
# Merge datasets in two operations
# all.x and all.y are TRUE to bring everything across to the combined dataset
hosp_combined <- merge(hosp_ads, hosp_bed, by = c("Code", "Name", "hdate"), all.x = TRUE, all.y = TRUE)
hosp_combined <- merge(hosp_combined, hosp_bmv, by = c("Code", "Name", "hdate"), all.x = TRUE, all.y = TRUE)
hosp_combined <- merge(hosp_combined, hosp_deaths, by = c("Code", "Name", "hdate"), all.x = TRUE, all.y = TRUE)
# The combined dataset is now wide date
# Convert wide data to long
hosp_combined <- gather(hosp_combined, hevent, hnumber, hospads_number:death_number, na.rm = FALSE)
# RBD plot and geoms
rbd_plot <- ggplot(hosp_combined, aes(x=hdate,y=hnumber)) +
# Plot admissions subset as a bar chart
geom_bar(data = subset(hosp_combined, Code=="RBD" & hevent=="hospads_number"), aes(fill="gray67"), stat = "identity") +
geom_bar(data = subset(hosp_combined, Code=="RBD" & hevent=="death_number"), aes(x=hdate,y=-hnumber,fill="black"), stat = "identity", inherit.aes = FALSE) +
# Plot all covid beds occupied as a line using geom_xspline to create a smoothing effect
geom_xspline(data = subset(hosp_combined, Code=="RBD" & hevent=="totalbeds_number"), aes(colour = "turquoise4"), spline_shape = 1, size = 1) +
# Plot all mechanical ventilation covid beds occupied as a line using geom_xspline to create a smoothing effect
geom_xspline(data = subset(hosp_combined, Code=="RBD" & hevent=="mv_number"), aes(colour = "red4"), spline_shape = 1, size = 1) +
geom_hline(yintercept=0) +
xlab("Date") +
ylab("Number") +
scale_x_date(date_labels = "%d %B", date_breaks = "2 weeks") +
scale_y_continuous(position = "right") +
scale_fill_identity(name = "Admissions and deaths", guide = 'legend', labels = c("Deaths", "Admissions")) +
scale_colour_manual(name = "Covid +ve beds occupied", values = c("red4" = "red4", "turquoise4" = "turquoise4"), labels = c("Mechanical ventilation", "Total beds")) +
# set title
ggtitle("Covid in Dorset - hospital focus - Dorset County Hospital") +
labs(caption = paste("Data from NHS England / https://www.england.nhs.uk. Plotted", Sys.time(), sep = " "), subtitle = "Admissions data is published weekly, so may by missing for more recent days") +
theme_economist(base_family="Officina Sans ITC Book") +
theme(axis.line.x = element_line(size=.5, colour = "black"),
legend.position="right",
legend.direction="vertical",
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.title=element_text(family="Officina Sans ITC Book", size = 24),
plot.subtitle = element_text(family="Officina Sans ITC Book", hjust = 0, vjust = -1.5),
text=element_text(family="Officina Sans ITC Book"))
rbd_plot
# save to daily file
ggsave("hosp_rbd.png", width = 16.6, height = 8.65, units = "in")
# R0D plot and geoms
r0d_plot <- ggplot(hosp_combined, aes(x=hdate,y=hnumber)) +
# Plot admissions subset as a bar chart
geom_bar(data = subset(hosp_combined, Code=="R0D" & hevent=="hospads_number"), aes(fill="gray67"), stat = "identity") +
geom_bar(data = subset(hosp_combined, Code=="R0D" & hevent=="death_number"), aes(x=hdate,y=-hnumber,fill="black"), stat = "identity", inherit.aes = FALSE) +
# Plot all covid beds occupied as a line using geom_xspline to create a smoothing effect
geom_xspline(data = subset(hosp_combined, Code=="R0D" & hevent=="totalbeds_number"), aes(colour = "turquoise4"), spline_shape = 1, size = 1) +
# Plot all mechanical ventilation covid beds occupied as a line using geom_xspline to create a smoothing effect
geom_xspline(data = subset(hosp_combined, Code=="R0D" & hevent=="mv_number"), aes(colour = "red4"), spline_shape = 1, size = 1) +
geom_hline(yintercept=0) +
xlab("Date") +
ylab("Number") +
scale_x_date(date_labels = "%d %B", date_breaks = "2 weeks") +
scale_y_continuous(position = "right") +
scale_fill_identity(name = "Admissions and deaths", guide = 'legend', labels = c("Deaths", "Admissions")) +
scale_colour_manual(name = "Covid +ve beds occupied", values = c("red4" = "red4", "turquoise4" = "turquoise4"), labels = c("Mechanical ventilation", "Total beds")) +
# set title
ggtitle("Covid in Dorset - hospital focus - University Hospitals Dorset") +
labs(caption = paste("Data from NHS England / https://www.england.nhs.uk. Plotted", Sys.time(), sep = " "), subtitle = "Admissions data is published weekly, so may by missing for more recent days") +
theme_economist(base_family="Officina Sans ITC Book") +
theme(axis.line.x = element_line(size=.5, colour = "black"),
legend.position="right",
legend.direction="vertical",
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.title=element_text(family="Officina Sans ITC Book", size = 24),
plot.subtitle = element_text(family="Officina Sans ITC Book", hjust = 0, vjust = -1.5),
text=element_text(family="Officina Sans ITC Book"))
r0d_plot
rbd_plot
# save to daily file
ggsave("hosp_rbd.png", plot = "rbd_plot", width = 16.6, height = 8.65, units = "in")
# set working directory
setwd("~/Documents/GitHub/dorset_covid")
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
ggplot2,
dplyr,
zoo,
reshape2,
lubridate,
plotly,
data.table,
rjson,
ggthemes,
extrafont,
tidyr,
ggalt,
directlabels
)
# set working directory
setwd("~/Documents/GitHub/dorset_covid")
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
ggplot2,
dplyr,
zoo,
reshape2,
lubridate,
plotly,
data.table,
rjson,
ggthemes,
extrafont,
tidyr,
ggalt,
directlabels
)
# install fonts
font_import(paths = c("~/Documents/GitHub/dorset_covid"), prompt = F)
extrafont::loadfonts()
# IMPORT DATASETS ----
# Datasets have already been obtained from NHSE using the script hosp_prep.sh
# Skip the first thirteen rows as the headers are in row 14
# Set check.names to FALSE to preserve the headers as-is
hosp_ads <- read.csv("hospital_preparation/hospads.csv", skip = 13, check.names = FALSE)
hosp_bed <- read.csv("hospital_preparation/allbedscovid.csv", skip = 13, check.names = FALSE)
hosp_bmv <- read.csv("hospital_preparation/allbedsmv.csv", skip = 13, check.names = FALSE)
hosp_deaths <- read.csv("hospital_preparation/trustdeaths.csv", skip = 14, check.names = FALSE)
# Delete unwanted columns from hosp_deaths that break the filter below
hosp_deaths <- hosp_deaths[-c(2)]
hosp_deaths <- hosp_deaths[-c(4)]
hosp_deaths <- hosp_deaths[1:(length(hosp_deaths)-4)]
View(hosp_deaths)
# Remove organisations that aren't RBD or R0D
# Hospitalisations and admissions
hosp_ads <- hosp_ads %>%
filter(Code=="RBD" | Code=="R0D")
# All covid beds
hosp_bed <- hosp_bed %>%
filter(Code=="RBD" | Code=="R0D")
# All mechanical ventilation beds
hosp_bmv <- hosp_bmv %>%
filter(Code=="RBD" | Code=="R0D")
# All deaths
hosp_deaths <- hosp_deaths %>%
filter(Code=="RBD" | Code=="R0D")
# Convert wide data to long
hosp_ads <- gather(hosp_ads, hdate, hospads_number, "2021/04/07":"2021/10/31", na.rm = FALSE)
hosp_bed <- gather(hosp_bed, hdate, totalbeds_number, "2021/04/07":"2021/11/02", na.rm = FALSE)
hosp_bmv <- gather(hosp_bmv, hdate, mv_number, "2021/04/07":"2021/11/02", na.rm = FALSE)
hosp_deaths <- gather(hosp_deaths, hdate, death_number, "2020/03/01":"2021/11/07", na.rm = FALSE)
# define the date format
hosp_ads$hdate = as.Date(hosp_ads$hdate, "%Y/%m/%d")
hosp_bed$hdate = as.Date(hosp_bed$hdate, "%Y/%m/%d")
hosp_bmv$hdate = as.Date(hosp_bmv$hdate, "%Y/%m/%d")
hosp_deaths$hdate = as.Date(hosp_deaths$hdate, "%Y/%m/%d")
# Remove columns we don't need
hosp_ads <- subset(hosp_ads, hdate > today() - months(3), select = c("Code", "Name", "hdate", "hospads_number"))
hosp_bed <- subset(hosp_bed, hdate > today() - months(3), select = c("Code", "Name", "hdate", "totalbeds_number"))
hosp_bmv <- subset(hosp_bmv, hdate > today() - months(3), select = c("Code", "Name", "hdate", "mv_number"))
hosp_deaths <- subset(hosp_deaths, hdate > today() - months(3), select = c("Code", "Name", "hdate", "death_number"))
# Merge datasets in two operations
# all.x and all.y are TRUE to bring everything across to the combined dataset
hosp_combined <- merge(hosp_ads, hosp_bed, by = c("Code", "Name", "hdate"), all.x = TRUE, all.y = TRUE)
hosp_combined <- merge(hosp_combined, hosp_bmv, by = c("Code", "Name", "hdate"), all.x = TRUE, all.y = TRUE)
hosp_combined <- merge(hosp_combined, hosp_deaths, by = c("Code", "Name", "hdate"), all.x = TRUE, all.y = TRUE)
# The combined dataset is now wide date
# Convert wide data to long
hosp_combined <- gather(hosp_combined, hevent, hnumber, hospads_number:death_number, na.rm = FALSE)
# RBD plot and geoms
rbd_plot <- ggplot(hosp_combined, aes(x=hdate,y=hnumber)) +
# Plot admissions subset as a bar chart
geom_bar(data = subset(hosp_combined, Code=="RBD" & hevent=="hospads_number"), aes(fill="gray67"), stat = "identity") +
geom_bar(data = subset(hosp_combined, Code=="RBD" & hevent=="death_number"), aes(x=hdate,y=-hnumber,fill="black"), stat = "identity", inherit.aes = FALSE) +
# Plot all covid beds occupied as a line using geom_xspline to create a smoothing effect
geom_xspline(data = subset(hosp_combined, Code=="RBD" & hevent=="totalbeds_number"), aes(colour = "turquoise4"), spline_shape = 1, size = 1) +
# Plot all mechanical ventilation covid beds occupied as a line using geom_xspline to create a smoothing effect
geom_xspline(data = subset(hosp_combined, Code=="RBD" & hevent=="mv_number"), aes(colour = "red4"), spline_shape = 1, size = 1) +
geom_hline(yintercept=0) +
xlab("Date") +
ylab("Number") +
scale_x_date(date_labels = "%d %B", date_breaks = "2 weeks") +
scale_y_continuous(position = "right") +
scale_fill_identity(name = "Admissions and deaths", guide = 'legend', labels = c("Deaths", "Admissions")) +
scale_colour_manual(name = "Covid +ve beds occupied", values = c("red4" = "red4", "turquoise4" = "turquoise4"), labels = c("Mechanical ventilation", "Total beds")) +
# set title
ggtitle("Covid in Dorset - hospital focus - Dorset County Hospital") +
labs(caption = paste("Data from NHS England / https://www.england.nhs.uk. Plotted", Sys.time(), sep = " "), subtitle = "Admissions data is published weekly, so may by missing for more recent days") +
theme_economist(base_family="Officina Sans ITC Book") +
theme(axis.line.x = element_line(size=.5, colour = "black"),
legend.position="right",
legend.direction="vertical",
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.title=element_text(family="Officina Sans ITC Book", size = 24),
plot.subtitle = element_text(family="Officina Sans ITC Book", hjust = 0, vjust = -1.5),
text=element_text(family="Officina Sans ITC Book"))
rbd_plot
View(hosp_ads)
# IMPORT DATASETS ----
# Datasets have already been obtained from NHSE using the script hosp_prep.sh
# Skip the first thirteen rows as the headers are in row 14
# Set check.names to FALSE to preserve the headers as-is
hosp_ads <- read.csv("hospital_preparation/hospads.csv", skip = 13, check.names = FALSE)
View(hosp_ads)
# Convert wide data to long
hosp_ads <- gather(hosp_ads, hdate, hospads_number, "2021/04/07":last_col(), na.rm = FALSE)
rm(hosp_ads)
# IMPORT DATASETS ----
# Datasets have already been obtained from NHSE using the script hosp_prep.sh
# Skip the first thirteen rows as the headers are in row 14
# Set check.names to FALSE to preserve the headers as-is
hosp_ads <- read.csv("hospital_preparation/hospads.csv", skip = 13, check.names = FALSE)
# Remove organisations that aren't RBD or R0D
# Hospitalisations and admissions
hosp_ads <- hosp_ads %>%
filter(Code=="RBD" | Code=="R0D")
# Convert wide data to long
hosp_ads <- gather(hosp_ads, hdate, hospads_number, "2021/04/07":last_col(), na.rm = FALSE)
View(hosp_ads)
# set working directory
setwd("~/Documents/GitHub/dorset_covid")
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
ggplot2,
dplyr,
zoo,
reshape2,
lubridate,
plotly,
data.table,
rjson,
ggthemes,
extrafont,
tidyr,
ggalt,
directlabels
)
# install fonts
font_import(paths = c("~/Documents/GitHub/dorset_covid"), prompt = F)
extrafont::loadfonts()
# IMPORT DATASETS ----
# Datasets have already been obtained from NHSE using the script hosp_prep.sh
# Skip the first thirteen rows as the headers are in row 14
# Set check.names to FALSE to preserve the headers as-is
hosp_ads <- read.csv("hospital_preparation/hospads.csv", skip = 13, check.names = FALSE)
hosp_bed <- read.csv("hospital_preparation/allbedscovid.csv", skip = 13, check.names = FALSE)
hosp_bmv <- read.csv("hospital_preparation/allbedsmv.csv", skip = 13, check.names = FALSE)
hosp_deaths <- read.csv("hospital_preparation/trustdeaths.csv", skip = 14, check.names = FALSE)
# Delete unwanted columns from hosp_deaths that break the filter below
hosp_deaths <- hosp_deaths[-c(2)]
hosp_deaths <- hosp_deaths[-c(4)]
hosp_deaths <- hosp_deaths[1:(length(hosp_deaths)-4)]
View(hosp_deaths)
# Remove organisations that aren't RBD or R0D
# Hospitalisations and admissions
hosp_ads <- hosp_ads %>%
filter(Code=="RBD" | Code=="R0D")
# All covid beds
hosp_bed <- hosp_bed %>%
filter(Code=="RBD" | Code=="R0D")
# All mechanical ventilation beds
hosp_bmv <- hosp_bmv %>%
filter(Code=="RBD" | Code=="R0D")
# All deaths
hosp_deaths <- hosp_deaths %>%
filter(Code=="RBD" | Code=="R0D")
# Convert wide data to long
hosp_ads <- gather(hosp_ads, hdate, hospads_number, "2021/04/07":last_col(), na.rm = FALSE)
hosp_bed <- gather(hosp_bed, hdate, totalbeds_number, "2021/04/07":last_col(), na.rm = FALSE)
hosp_bmv <- gather(hosp_bmv, hdate, mv_number, "2021/04/07":last_col(), na.rm = FALSE)
hosp_deaths <- gather(hosp_deaths, hdate, death_number, "2020/03/01":last_col(), na.rm = FALSE)
# define the date format
hosp_ads$hdate = as.Date(hosp_ads$hdate, "%Y/%m/%d")
hosp_bed$hdate = as.Date(hosp_bed$hdate, "%Y/%m/%d")
hosp_bmv$hdate = as.Date(hosp_bmv$hdate, "%Y/%m/%d")
hosp_deaths$hdate = as.Date(hosp_deaths$hdate, "%Y/%m/%d")
# Remove columns we don't need
hosp_ads <- subset(hosp_ads, hdate > today() - months(3), select = c("Code", "Name", "hdate", "hospads_number"))
hosp_bed <- subset(hosp_bed, hdate > today() - months(3), select = c("Code", "Name", "hdate", "totalbeds_number"))
hosp_bmv <- subset(hosp_bmv, hdate > today() - months(3), select = c("Code", "Name", "hdate", "mv_number"))
hosp_deaths <- subset(hosp_deaths, hdate > today() - months(3), select = c("Code", "Name", "hdate", "death_number"))
# Merge datasets in two operations
# all.x and all.y are TRUE to bring everything across to the combined dataset
hosp_combined <- merge(hosp_ads, hosp_bed, by = c("Code", "Name", "hdate"), all.x = TRUE, all.y = TRUE)
hosp_combined <- merge(hosp_combined, hosp_bmv, by = c("Code", "Name", "hdate"), all.x = TRUE, all.y = TRUE)
hosp_combined <- merge(hosp_combined, hosp_deaths, by = c("Code", "Name", "hdate"), all.x = TRUE, all.y = TRUE)
# The combined dataset is now wide date
# Convert wide data to long
hosp_combined <- gather(hosp_combined, hevent, hnumber, hospads_number:death_number, na.rm = FALSE)
# RBD plot and geoms
rbd_plot <- ggplot(hosp_combined, aes(x=hdate,y=hnumber)) +
# Plot admissions subset as a bar chart
geom_bar(data = subset(hosp_combined, Code=="RBD" & hevent=="hospads_number"), aes(fill="gray67"), stat = "identity") +
geom_bar(data = subset(hosp_combined, Code=="RBD" & hevent=="death_number"), aes(x=hdate,y=-hnumber,fill="black"), stat = "identity", inherit.aes = FALSE) +
# Plot all covid beds occupied as a line using geom_xspline to create a smoothing effect
geom_xspline(data = subset(hosp_combined, Code=="RBD" & hevent=="totalbeds_number"), aes(colour = "turquoise4"), spline_shape = 1, size = 1) +
# Plot all mechanical ventilation covid beds occupied as a line using geom_xspline to create a smoothing effect
geom_xspline(data = subset(hosp_combined, Code=="RBD" & hevent=="mv_number"), aes(colour = "red4"), spline_shape = 1, size = 1) +
geom_hline(yintercept=0) +
xlab("Date") +
ylab("Number") +
scale_x_date(date_labels = "%d %B", date_breaks = "2 weeks") +
scale_y_continuous(position = "right") +
scale_fill_identity(name = "Admissions and deaths", guide = 'legend', labels = c("Deaths", "Admissions")) +
scale_colour_manual(name = "Covid +ve beds occupied", values = c("red4" = "red4", "turquoise4" = "turquoise4"), labels = c("Mechanical ventilation", "Total beds")) +
# set title
ggtitle("Covid in Dorset - hospital focus - Dorset County Hospital") +
labs(caption = paste("Data from NHS England / https://www.england.nhs.uk. Plotted", Sys.time(), sep = " "), subtitle = "Admissions data is published weekly, so may by missing for more recent days") +
theme_economist(base_family="Officina Sans ITC Book") +
theme(axis.line.x = element_line(size=.5, colour = "black"),
legend.position="right",
legend.direction="vertical",
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.title=element_text(family="Officina Sans ITC Book", size = 24),
plot.subtitle = element_text(family="Officina Sans ITC Book", hjust = 0, vjust = -1.5),
text=element_text(family="Officina Sans ITC Book"))
rbd_plot
# save to daily file
ggsave("hosp_rbd.png", plot = "rbd_plot", width = 16.6, height = 8.65, units = "in")
# save to daily file
ggsave("hosp_rbd.png", width = 16.6, height = 8.65, units = "in")
# save to daily file
ggsave("hosp_rbd.png",rbd_plot, width = 16.6, height = 8.65, units = "in")
# R0D plot and geoms
r0d_plot <- ggplot(hosp_combined, aes(x=hdate,y=hnumber)) +
# Plot admissions subset as a bar chart
geom_bar(data = subset(hosp_combined, Code=="R0D" & hevent=="hospads_number"), aes(fill="gray67"), stat = "identity") +
geom_bar(data = subset(hosp_combined, Code=="R0D" & hevent=="death_number"), aes(x=hdate,y=-hnumber,fill="black"), stat = "identity", inherit.aes = FALSE) +
# Plot all covid beds occupied as a line using geom_xspline to create a smoothing effect
geom_xspline(data = subset(hosp_combined, Code=="R0D" & hevent=="totalbeds_number"), aes(colour = "turquoise4"), spline_shape = 1, size = 1) +
# Plot all mechanical ventilation covid beds occupied as a line using geom_xspline to create a smoothing effect
geom_xspline(data = subset(hosp_combined, Code=="R0D" & hevent=="mv_number"), aes(colour = "red4"), spline_shape = 1, size = 1) +
geom_hline(yintercept=0) +
xlab("Date") +
ylab("Number") +
scale_x_date(date_labels = "%d %B", date_breaks = "2 weeks") +
scale_y_continuous(position = "right") +
scale_fill_identity(name = "Admissions and deaths", guide = 'legend', labels = c("Deaths", "Admissions")) +
scale_colour_manual(name = "Covid +ve beds occupied", values = c("red4" = "red4", "turquoise4" = "turquoise4"), labels = c("Mechanical ventilation", "Total beds")) +
# set title
ggtitle("Covid in Dorset - hospital focus - University Hospitals Dorset") +
labs(caption = paste("Data from NHS England / https://www.england.nhs.uk. Plotted", Sys.time(), sep = " "), subtitle = "Admissions data is published weekly, so may by missing for more recent days") +
theme_economist(base_family="Officina Sans ITC Book") +
theme(axis.line.x = element_line(size=.5, colour = "black"),
legend.position="right",
legend.direction="vertical",
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.title=element_text(family="Officina Sans ITC Book", size = 24),
plot.subtitle = element_text(family="Officina Sans ITC Book", hjust = 0, vjust = -1.5),
text=element_text(family="Officina Sans ITC Book"))
r0d_plot
View(r0d_plot)
rbd_plot
# RBD plot and geoms
rbd_plot <- ggplot(hosp_combined, aes(x=hdate,y=hnumber)) +
# Plot admissions subset as a bar chart
geom_bar(data = subset(hosp_combined, Code=="RBD" & hevent=="hospads_number"), aes(fill="gray67"), stat = "identity") +
geom_bar(data = subset(hosp_combined, Code=="RBD" & hevent=="death_number"), aes(x=hdate,y=-hnumber,fill="black"), stat = "identity", inherit.aes = FALSE) +
# Plot all covid beds occupied as a line using geom_xspline to create a smoothing effect
geom_xspline(data = subset(hosp_combined, Code=="RBD" & hevent=="totalbeds_number"), aes(colour = "turquoise4"), spline_shape = 1, size = 1) +
# Plot all mechanical ventilation covid beds occupied as a line using geom_xspline to create a smoothing effect
geom_xspline(data = subset(hosp_combined, Code=="RBD" & hevent=="mv_number"), aes(colour = "red4"), spline_shape = 1, size = 1) +
geom_hline(yintercept=0) +
xlab("Date") +
ylab("Number") +
scale_x_date(date_labels = "%d %B", date_breaks = "2 weeks") +
scale_y_continuous(position = "right") +
scale_fill_identity(name = "Admissions and deaths", guide = 'legend', labels = c("Deaths", "Admissions")) +
scale_colour_manual(name = "Covid +ve beds occupied", values = c("red4" = "red4", "turquoise4" = "turquoise4"), labels = c("Mechanical ventilation", "Total beds")) +
# set title
ggtitle("Covid in Dorset - hospital focus - Dorset County Hospital") +
labs(caption = paste("Data from NHS England / https://www.england.nhs.uk. Plotted", Sys.time(), sep = " "), subtitle = "Admissions data is published weekly, so may by missing for more recent days") +
theme_economist(base_family="Officina Sans ITC Book") +
theme(axis.line.x = element_line(size=.5, colour = "black"),
legend.position="right",
legend.direction="vertical",
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.title=element_text(family="Officina Sans ITC Book", size = 24),
plot.subtitle = element_text(family="Officina Sans ITC Book", hjust = 0, vjust = -1.5),
text=element_text(family="Officina Sans ITC Book"))
rbd_plot
rbd_plot
# R0D plot and geoms
r0d_plot <- ggplot(hosp_combined, aes(x=hdate,y=hnumber)) +
# Plot admissions subset as a bar chart
geom_bar(data = subset(hosp_combined, Code=="R0D" & hevent=="hospads_number"), aes(fill="gray67"), stat = "identity") +
geom_bar(data = subset(hosp_combined, Code=="R0D" & hevent=="death_number"), aes(x=hdate,y=-hnumber,fill="black"), stat = "identity", inherit.aes = FALSE) +
# Plot all covid beds occupied as a line using geom_xspline to create a smoothing effect
geom_xspline(data = subset(hosp_combined, Code=="R0D" & hevent=="totalbeds_number"), aes(colour = "turquoise4"), spline_shape = 1, size = 1) +
# Plot all mechanical ventilation covid beds occupied as a line using geom_xspline to create a smoothing effect
geom_xspline(data = subset(hosp_combined, Code=="R0D" & hevent=="mv_number"), aes(colour = "red4"), spline_shape = 1, size = 1) +
geom_hline(yintercept=0) +
xlab("Date") +
ylab("Number") +
scale_x_date(date_labels = "%d %B", date_breaks = "2 weeks") +
scale_y_continuous(position = "right") +
scale_fill_identity(name = "Admissions and deaths", guide = 'legend', labels = c("Deaths", "Admissions")) +
scale_colour_manual(name = "Covid +ve beds occupied", values = c("red4" = "red4", "turquoise4" = "turquoise4"), labels = c("Mechanical ventilation", "Total beds")) +
# set title
ggtitle("Covid in Dorset - hospital focus - University Hospitals Dorset") +
labs(caption = paste("Data from NHS England / https://www.england.nhs.uk. Plotted", Sys.time(), sep = " "), subtitle = "Admissions data is published weekly, so may by missing for more recent days") +
theme_economist(base_family="Officina Sans ITC Book") +
theme(axis.line.x = element_line(size=.5, colour = "black"),
legend.position="right",
legend.direction="vertical",
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.title=element_text(family="Officina Sans ITC Book", size = 24),
plot.subtitle = element_text(family="Officina Sans ITC Book", hjust = 0, vjust = -1.5),
text=element_text(family="Officina Sans ITC Book"))
r0d_plot
source('~/Documents/GitHub/dorset_covid/covid hospital focus.R', echo=TRUE)
# set working directory
setwd("~/Documents/GitHub/dorset_covid")
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
ggplot2,
dplyr,
zoo,
reshape2,
lubridate,
plotly,
data.table,
rjson,
ggthemes,
extrafont,
tidyr,
ggalt,
directlabels
)
# install fonts
font_import(paths = c("~/Documents/GitHub/dorset_covid"), prompt = F)
extrafont::loadfonts()
source("covid hospital focus.R")
# set working directory
setwd("~/Documents/GitHub/dorset_covid")
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
ggplot2,
dplyr,
zoo,
reshape2,
lubridate,
plotly,
data.table,
rjson,
ggthemes,
extrafont,
tidyr,
ggalt,
directlabels
)
# install fonts
font_import(paths = c("~/Documents/GitHub/dorset_covid"), prompt = F)
extrafont::loadfonts()
source("covid hospital focus.R")
# R0D plot and geoms
r0d_plot <- ggplot(hosp_combined, aes(x=hdate,y=hnumber)) +
# Plot admissions subset as a bar chart
geom_bar(data = subset(hosp_combined, Code=="R0D" & hevent=="hospads_number"), aes(fill="gray67"), stat = "identity") +
geom_bar(data = subset(hosp_combined, Code=="R0D" & hevent=="death_number"), aes(x=hdate,y=-hnumber,fill="black"), stat = "identity", inherit.aes = FALSE) +
# Plot all covid beds occupied as a line using geom_xspline to create a smoothing effect
geom_xspline(data = subset(hosp_combined, Code=="R0D" & hevent=="totalbeds_number"), aes(colour = "turquoise4"), spline_shape = 1, size = 1) +
# Plot all mechanical ventilation covid beds occupied as a line using geom_xspline to create a smoothing effect
geom_xspline(data = subset(hosp_combined, Code=="R0D" & hevent=="mv_number"), aes(colour = "red4"), spline_shape = 1, size = 1) +
geom_hline(yintercept=0) +
xlab("Date") +
ylab("Number") +
scale_x_date(date_labels = "%d %B", date_breaks = "2 weeks") +
scale_y_continuous(position = "right") +
scale_fill_identity(name = "Admissions and deaths", guide = 'legend', labels = c("Deaths", "Admissions")) +
scale_colour_manual(name = "Covid +ve beds occupied", values = c("red4" = "red4", "turquoise4" = "turquoise4"), labels = c("Mechanical ventilation", "Total beds")) +
# set title
ggtitle("Covid in Dorset - hospital focus - University Hospitals Dorset") +
labs(caption = paste("Data from NHS England / https://www.england.nhs.uk. Plotted", Sys.time(), sep = " "), subtitle = "Admissions data is published weekly, so may by missing for more recent days") +
theme_economist(base_family="Officina Sans ITC Book") +
theme(axis.line.x = element_line(size=.5, colour = "black"),
legend.position="right",
legend.direction="vertical",
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
plot.title=element_text(family="Officina Sans ITC Book", size = 24),
plot.subtitle = element_text(family="Officina Sans ITC Book", hjust = 0, vjust = -1.5),
text=element_text(family="Officina Sans ITC Book"))
r0d_plot
