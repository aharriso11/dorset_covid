"South East_95% Upper credible interval nm",
"South East_Modelled ratio of people testing positive for COVID-19",
"South East_95% Lower credible interval ra",
"South East_95% Upper credible interval ra",
"South West_Modelled % testing positive for COVID-19",
"South West_95% Lower credible interval pc",
"South West_95% Upper credible interval pc",
"South West_Modelled number of people testing positive for COVID-19",
"South West_95% Lower credible interval nm",
"South West_95% Upper credible interval nm",
"South West_Modelled ratio of people testing positive for COVID-19",
"South West_95% Lower credible interval ra",
"South West_95% Upper credible interval ra"
)
# import data from downloaded file and replace the headers
df_region_daily <- read_excel("devel/onslatest.xlsx", sheet = "1f", skip = 6, col_names = region_headers)
# remove the last seven rows which are not useful
df_region_daily <- head(df_region_daily, -7)
# convert dates from numeric to Gregorian format
df_region_daily$Date <- convertToDate(df_region_daily$Date)
# convert data from wide to long and separate out region and metric columns
df_region_daily <- df_region_daily %>%
gather(METRIC, VALUE, -c("Date")) %>%
separate(METRIC, into = c("REGION", "METRIC"), sep = "_")
# subset the modelled daily case numbers
df_region_daily_numbers <- df_region_daily %>%
filter(METRIC %in% c("Modelled number of people testing positive for COVID-19", "95% Lower credible interval nm", "95% Upper credible interval nm"))
# convert values to numeric
df_region_daily_numbers$VALUE <- as.numeric(as.character(df_region_daily_numbers$VALUE))
# spread region numbers to give us separated figures for ribbon plot
df_region_daily_numbers_wide <- df_region_daily_numbers %>%
pivot_wider(names_from = METRIC, values_from = VALUE)
# get title dates
date_first <- format(head(df_region_daily_numbers$Date, 1), "%d %B")
date_last <- format(tail(df_region_daily_numbers$Date, 1), "%d %B")
# Rename columns
names(df_region_daily_numbers_wide)[names(df_region_daily_numbers_wide) == "95% Lower credible interval nm"] <- "ymin"
names(df_region_daily_numbers_wide)[names(df_region_daily_numbers_wide) == "95% Upper credible interval nm"] <- "ymax"
st2 <- paste("The modelled number of people in English regions testing positive for covid-19, from the ONS covid-19 infection survey.<br>
The lighter shaded area shows the <b>confidence interval</b> within which the actual number of infections might fall.<br>
This dataset was produced on <b> ", date_publication, " </b> and covers dates between ", date_first, " and ", date_last, ". The next update will be on <b>", date_next, "</b>.", sep = "")
# plot and geoms
df_plot_region_numbers <- ggplot() +
# Plot confidence interval as a ribbon
geom_ribbon(data = df_region_daily_numbers_wide, aes(x = Date, ymin = ymin, ymax = ymax), fill = "thistle1") +
# plot the modelled number and upper and lower intervals as xps lines
geom_xspline(data = subset(df_region_daily_numbers, METRIC == "Modelled number of people testing positive for COVID-19"), aes(x = Date, y = VALUE), stat = "xspline", size = 1.25, colour = "red4") +
geom_xspline(data = subset(df_region_daily_numbers, METRIC == "95% Lower credible interval nm"), aes(x = Date, y = VALUE), stat = "xspline", colour = "thistle3") +
geom_xspline(data = subset(df_region_daily_numbers, METRIC == "95% Upper credible interval nm"), aes(x = Date, y = VALUE), stat = "xspline", colour = "thistle3") +
# facet by area name
facet_wrap( ~ REGION, ncol = 3) +
# scale settings
scale_x_date(date_labels = "%d %b", date_breaks = "7 days") +
scale_y_continuous(labels = comma) +
# axis settings
xlab("Date") +
ylab("Modelled number of people testing positive for covid-19")+
# set title and subtitle
ggtitle("Modelled daily rates of the percentage of the population testing positive for covid-19 in English regions") +
labs(caption = paste("Data from the Office for National Statistics. Plotted", Sys.time(), sep = " ", "\nData plot by Andrew Harrison / https://aharriso11.github.io/dorset_covid"),
subtitle = paste0(st2)) +
# set theme
theme_base() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 20, family = "Helvetica", face = "bold"),
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 11),
plot.caption = element_text(size = 8),
legend.text = element_text(size = 12),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 8),
strip.text.x = element_text(size = 12),
strip.text.y = element_text(size = 12)
)
# generate the plot
show(df_plot_region_numbers)
# save the plot
ggsave("output/ons_regions.png", width = 16.6, height = 8.65, units = "in", device = "png")
source("~/Documents/GitHub/dorset_covid/scripts/ons_england.R", echo=TRUE)
# generate the plot
show(df_plot_eng)
# save the plot
ggsave("output/ons_england.png", width = 16.6, height = 8.65, units = "in", device = "png")
View(df_eng_daily_number)
# set working directory
setwd("~/Documents/GitHub/dorset_covid")
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
httr,
readxl,
readODS,
tidyverse,
zoo,
data.table,
scales,
glue,
ggtext,
ggthemes,
pals,
utils,
reshape,
lubridate,
rvest,
stringr,
openxlsx,
ggalt,
janitor
)
# OBTAIN DATA ----
read.csv(file = "/devel/ons_eng_cumulative.csv")
# OBTAIN DATA ----
read.csv(file = "./devel/ons_eng_cumulative.csv")
# OBTAIN DATA ----
df_eng_cumul <- read.csv(file = "./devel/ons_eng_cumulative.csv")
View(df_eng_cumul)
chr(df_eng_cumul)
str(df_eng_cumul)
View(df_eng_cumul)
df_eng_cumul$Date <- as.Date(df_eng_cumul$Date, "%Y-%m-%d")
str(df_eng_cumul)
df_eng_cumul$Modelled.number.of.people.testing.positive.for.COVID.19 <- as.numeric(df_eng_cumul$Modelled.number.of.people.testing.positive.for.COVID.19)
# OBTAIN DATA ----
df_eng_cumul <- read.csv(file = "./devel/ons_eng_cumulative.csv")
df_eng_cumul$Date <- as.Date(df_eng_cumul$Date, "%Y-%m-%d")
# OBTAIN DATA ----
df_eng_cumul <- read.csv(file = "./devel/ons_eng_cumulative.csv")
str(df_eng_cumul)
df_eng_daily_number <- df_eng_cumul
# convert wide data into long
df_long <- gather(df_eng_daily_number, event, total, -c(Date))
View(df_long)
st1 <- paste("Testing")
# plot and geoms
df_plot_eng <- ggplot() +
# Plot confidence interval as a ribbon
geom_ribbon(data = df_eng_daily_number, aes(x = Date, ymin = ymin, ymax = ymax), fill = "thistle1") +
# plot the modelled number and upper and lower intervals as xps lines
geom_xspline(data = subset(df_long, event=="modnum"), aes(x = Date, y = total), stat = "xspline", size = 1.25, colour = "red4") +
geom_xspline(data = subset(df_long, event=="ymin"), aes(x = Date, y = total), stat = "xspline", colour = "thistle3") +
geom_xspline(data = subset(df_long, event=="ymax"), aes(x = Date, y = total), stat = "xspline", colour = "thistle3") +
# scale settings
scale_x_date(date_labels = "%d %b", date_breaks = "3 days") +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6, accuracy = 0.1), position = "right") +
# axis settings
xlab("Date") +
ylab("") +
# set title and subtitle
ggtitle("Modelled daily rates of the percentage of the population testing positive for covid-19 in England") +
labs(caption = paste("Data from the Office for National Statistics. Plotted", Sys.time(), sep = " ", "\nData plot by Andrew Harrison / https://aharriso11.github.io/dorset_covid"),
subtitle = paste0(st1)) +
# set theme
theme_base() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 20, family = "Helvetica", face = "bold"),
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 11),
plot.caption = element_text(size = 8),
legend.text = element_text(size = 12),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 8),
strip.text.x = element_text(size = 12),
strip.text.y = element_text(size = 12)
)
# generate the plot
show(df_plot_eng)
# plot and geoms
df_plot_eng <- ggplot() +
# Plot confidence interval as a ribbon
geom_ribbon(data = df_eng_daily_number, aes(x = Date, ymin = ymin, ymax = ymax), fill = "thistle1") +
# plot the modelled number and upper and lower intervals as xps lines
geom_xspline(data = subset(df_long, event=="modnum"), aes(x = Date, y = total), stat = "xspline", size = 1.25, colour = "red4") +
geom_xspline(data = subset(df_long, event=="ymin"), aes(x = Date, y = total), stat = "xspline", colour = "thistle3") +
geom_xspline(data = subset(df_long, event=="ymax"), aes(x = Date, y = total), stat = "xspline", colour = "thistle3") +
# scale settings
# scale_x_date(date_labels = "%d %b", date_breaks = "3 days") +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6, accuracy = 0.1), position = "right") +
# axis settings
xlab("Date") +
ylab("") +
# set title and subtitle
ggtitle("Modelled daily rates of the percentage of the population testing positive for covid-19 in England") +
labs(caption = paste("Data from the Office for National Statistics. Plotted", Sys.time(), sep = " ", "\nData plot by Andrew Harrison / https://aharriso11.github.io/dorset_covid"),
subtitle = paste0(st1)) +
# set theme
theme_base() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 20, family = "Helvetica", face = "bold"),
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 11),
plot.caption = element_text(size = 8),
legend.text = element_text(size = 12),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 8),
strip.text.x = element_text(size = 12),
strip.text.y = element_text(size = 12)
)
# generate the plot
show(df_plot_eng)
str(df_long)
str(df_eng_daily_number)
str(df_eng_cumul)
# OBTAIN DATA ----
df_eng_cumul <- read.csv(file = "./devel/ons_eng_cumulative.csv")
# define the date format
df_eng_cumul$Date = as.Date(df_eng_cumul$Date, "%Y-%m-%d")
df_eng_daily_number <- df_eng_cumul
# convert wide data into long
df_long <- gather(df_eng_daily_number, event, total, -c(Date))
st1 <- paste("The modelled number of people in England testing positive for covid-19, from the ONS covid-19 infection survey.<br>
The lighter shaded area shows the <b>confidence interval</b> within which the actual number of infections might fall.<br>
This dataset was produced on <b>", date_publication, "</b> and covers dates between ", date_first, " and ", date_last, ". The next update will be on <b>", date_next, "</b>.", sep = "")
st1 <- paste("Testing")
# plot and geoms
df_plot_eng <- ggplot() +
# Plot confidence interval as a ribbon
geom_ribbon(data = df_eng_daily_number, aes(x = Date, ymin = ymin, ymax = ymax), fill = "thistle1") +
# plot the modelled number and upper and lower intervals as xps lines
geom_xspline(data = subset(df_long, event=="modnum"), aes(x = Date, y = total), stat = "xspline", size = 1.25, colour = "red4") +
geom_xspline(data = subset(df_long, event=="ymin"), aes(x = Date, y = total), stat = "xspline", colour = "thistle3") +
geom_xspline(data = subset(df_long, event=="ymax"), aes(x = Date, y = total), stat = "xspline", colour = "thistle3") +
# scale settings
scale_x_date(date_labels = "%d %b", date_breaks = "3 days") +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6, accuracy = 0.1), position = "right") +
# axis settings
xlab("Date") +
ylab("") +
# set title and subtitle
ggtitle("Modelled daily rates of the percentage of the population testing positive for covid-19 in England") +
labs(caption = paste("Data from the Office for National Statistics. Plotted", Sys.time(), sep = " ", "\nData plot by Andrew Harrison / https://aharriso11.github.io/dorset_covid"),
subtitle = paste0(st1)) +
# set theme
theme_base() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 20, family = "Helvetica", face = "bold"),
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 11),
plot.caption = element_text(size = 8),
legend.text = element_text(size = 12),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 8),
strip.text.x = element_text(size = 12),
strip.text.y = element_text(size = 12)
)
# generate the plot
show(df_plot_eng)
source("~/Documents/GitHub/dorset_covid/devel/ons_england_cumul.R", echo=TRUE)
# generate the plot
show(df_plot_eng)
# set working directory
setwd("~/Documents/GitHub/dorset_covid")
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
httr,
readxl,
readODS,
tidyverse,
zoo,
data.table,
scales,
glue,
ggtext,
ggthemes,
pals,
utils,
reshape,
lubridate,
rvest,
stringr,
openxlsx,
ggalt,
janitor
)
# OBTAIN DATA ----
df_eng_cumul <- read.csv(file = "./devel/ons_eng_cumulative.csv")
# define the date format
df_eng_cumul$Date = as.Date(df_eng_cumul$Date, "%Y-%m-%d")
df_eng_daily_number <- df_eng_cumul
# convert wide data into long
df_long <- gather(df_eng_daily_number, event, total, -c(Date))
st1 <- paste("Testing")
# plot and geoms
df_plot_eng <- ggplot() +
# Plot confidence interval as a ribbon
geom_ribbon(data = df_eng_daily_number, aes(x = Date, ymin = ymin, ymax = ymax), fill = "thistle1") +
# plot the modelled number and upper and lower intervals as xps lines
geom_xspline(data = subset(df_long, event=="modnum"), aes(x = Date, y = total), stat = "xspline", size = 1.25, colour = "red4") +
geom_xspline(data = subset(df_long, event=="ymin"), aes(x = Date, y = total), stat = "xspline", colour = "thistle3") +
geom_xspline(data = subset(df_long, event=="ymax"), aes(x = Date, y = total), stat = "xspline", colour = "thistle3") +
# scale settings
scale_x_date(date_labels = "%d %b", date_breaks = "3 days") +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6, accuracy = 0.1), position = "right") +
# axis settings
xlab("Date") +
ylab("") +
# set title and subtitle
ggtitle("Modelled daily rates of the percentage of the population testing positive for covid-19 in England") +
labs(caption = paste("Data from the Office for National Statistics. Plotted", Sys.time(), sep = " ", "\nData plot by Andrew Harrison / https://aharriso11.github.io/dorset_covid"),
subtitle = paste0(st1)) +
# set theme
theme_base() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 20, family = "Helvetica", face = "bold"),
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 11),
plot.caption = element_text(size = 8),
legend.text = element_text(size = 12),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 8),
strip.text.x = element_text(size = 12),
strip.text.y = element_text(size = 12)
)
# generate the plot
show(df_plot_eng)
# plot and geoms
df_plot_eng <- ggplot() +
# Plot confidence interval as a ribbon
geom_ribbon(data = df_eng_daily_number, aes(x = Date, ymin = ymin, ymax = ymax), fill = "thistle1") +
# plot the modelled number and upper and lower intervals as xps lines
geom_xspline(data = subset(df_long, event=="modnum"), aes(x = Date, y = total), stat = "xspline", size = 1.25, colour = "red4") +
geom_xspline(data = subset(df_long, event=="ymin"), aes(x = Date, y = total), stat = "xspline", colour = "thistle3") +
geom_xspline(data = subset(df_long, event=="ymax"), aes(x = Date, y = total), stat = "xspline", colour = "thistle3") +
# scale settings
scale_x_date(date_labels = "%d %b", date_breaks = "2 weeks") +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6, accuracy = 0.1), position = "right") +
# axis settings
xlab("Date") +
ylab("") +
# set title and subtitle
ggtitle("Modelled daily rates of the percentage of the population testing positive for covid-19 in England") +
labs(caption = paste("Data from the Office for National Statistics. Plotted", Sys.time(), sep = " ", "\nData plot by Andrew Harrison / https://aharriso11.github.io/dorset_covid"),
subtitle = paste0(st1)) +
# set theme
theme_base() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 20, family = "Helvetica", face = "bold"),
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 11),
plot.caption = element_text(size = 8),
legend.text = element_text(size = 12),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 8),
strip.text.x = element_text(size = 12),
strip.text.y = element_text(size = 12)
)
# generate the plot
show(df_plot_eng)
# save to daily file
ggsave("output/ons_england_long.png", width = 16.6, height = 8.65, units = "in")
# set working directory
setwd("~/Documents/GitHub/dorset_covid")
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
httr,
readxl,
readODS,
tidyverse,
zoo,
data.table,
scales,
glue,
ggtext,
ggthemes,
pals,
utils,
reshape,
lubridate,
rvest,
stringr,
openxlsx,
ggalt,
janitor
)
# OBTAIN DATA ----
df_eng_cumul <- read.csv(file = "./devel/ons_eng_cumulative.csv")
# define the date format
df_eng_cumul$Date = as.Date(df_eng_cumul$Date, "%Y-%m-%d")
df_eng_daily_number <- df_eng_cumul
# convert wide data into long
df_long <- gather(df_eng_daily_number, event, total, -c(Date))
st1 <- paste("Testing")
# plot and geoms
df_plot_eng <- ggplot() +
# Plot confidence interval as a ribbon
geom_ribbon(data = df_eng_daily_number, aes(x = Date, ymin = ymin, ymax = ymax), fill = "thistle1") +
# plot the modelled number and upper and lower intervals as xps lines
geom_xspline(data = subset(df_long, event=="modnum"), aes(x = Date, y = total), stat = "xspline", size = 1.25, colour = "red4") +
geom_xspline(data = subset(df_long, event=="ymin"), aes(x = Date, y = total), stat = "xspline", colour = "thistle3") +
geom_xspline(data = subset(df_long, event=="ymax"), aes(x = Date, y = total), stat = "xspline", colour = "thistle3") +
# scale settings
scale_x_date(date_labels = "%d %b", date_breaks = "2 weeks") +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6, accuracy = 0.1), position = "right") +
# axis settings
xlab("Date") +
ylab("") +
# set title and subtitle
ggtitle("Modelled daily rates of the percentage of the population testing positive for covid-19 in England") +
labs(caption = paste("Data from the Office for National Statistics. Plotted", Sys.time(), sep = " ", "\nData plot by Andrew Harrison / https://aharriso11.github.io/dorset_covid"),
subtitle = paste0(st1)) +
# set theme
theme_base() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 20, family = "Helvetica", face = "bold"),
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 11),
plot.caption = element_text(size = 8),
legend.text = element_text(size = 12),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 8),
strip.text.x = element_text(size = 12),
strip.text.y = element_text(size = 12)
)
# generate the plot
show(df_plot_eng)
# save to daily file
ggsave("output/ons_england_long.png", width = 16.6, height = 8.65, units = "in")
# set working directory
setwd("~/Documents/GitHub/dorset_covid")
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
httr,
readxl,
readODS,
tidyverse,
zoo,
data.table,
scales,
glue,
ggtext,
ggthemes,
pals,
utils,
reshape,
lubridate,
rvest,
stringr,
openxlsx,
ggalt,
janitor
)
# OBTAIN DATA ----
df_eng_cumul <- read.csv(file = "./devel/ons_eng_cumulative.csv")
# define the date format
df_eng_cumul$Date = as.Date(df_eng_cumul$Date, "%Y-%m-%d")
df_eng_daily_number <- df_eng_cumul
# convert wide data into long
df_long <- gather(df_eng_daily_number, event, total, -c(Date))
st1 <- paste("Testing")
# plot and geoms
df_plot_eng <- ggplot() +
# Plot confidence interval as a ribbon
geom_ribbon(data = df_eng_daily_number, aes(x = Date, ymin = ymin, ymax = ymax), fill = "thistle1") +
# plot the modelled number and upper and lower intervals as xps lines
geom_xspline(data = subset(df_long, event=="modnum"), aes(x = Date, y = total), stat = "xspline", size = 1.25, colour = "red4") +
geom_xspline(data = subset(df_long, event=="ymin"), aes(x = Date, y = total), stat = "xspline", colour = "thistle3") +
geom_xspline(data = subset(df_long, event=="ymax"), aes(x = Date, y = total), stat = "xspline", colour = "thistle3") +
# scale settings
scale_x_date(date_labels = "%d %b", date_breaks = "2 weeks") +
scale_y_continuous(labels = unit_format(unit = "M", scale = 1e-6, accuracy = 0.1), position = "right") +
# axis settings
xlab("Date") +
ylab("") +
# set title and subtitle
ggtitle("Modelled daily rates of the percentage of the population testing positive for covid-19 in England") +
labs(caption = paste("Data from the Office for National Statistics. Plotted", Sys.time(), sep = " ", "\nData plot by Andrew Harrison / https://aharriso11.github.io/dorset_covid"),
subtitle = paste0(st1)) +
# set theme
theme_base() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 20, family = "Helvetica", face = "bold"),
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 11),
plot.caption = element_text(size = 8),
legend.text = element_text(size = 12),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 8),
strip.text.x = element_text(size = 12),
strip.text.y = element_text(size = 12)
)
# generate the plot
show(df_plot_eng)
