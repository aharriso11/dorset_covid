socialcare_plot <- ggplot() +
geom_bar(data = la_rev_data_socialcare, aes(x = reorder(la_name, adult), y = adult, fill = la_type), stat = "identity") +
scale_y_continuous(name = "Spend £thousand", labels = comma) +
scale_x_discrete(name = "Local authority") +
#  facet_grid( ~ spend_type) +
theme_bw() +
theme(axis.text.x=element_text(angle=45,hjust=1,size = 3))
socialcare_plot
socialcare_plot <- ggplot() +
geom_bar(data = la_rev_data_socialcare, aes(x = reorder(la_name, adult), y = adult, fill = la_type), stat = "identity") +
scale_y_continuous(name = "Spend £thousand", labels = comma) +
scale_x_discrete(name = "Local authority") +
#  facet_grid( ~ spend_type) +
theme_bw() +
theme(axis.text.x=element_text(angle=45,hjust=1,size = 4))
socialcare_plot
theme(axis.text.x=element_text(angle=45,hjust=1,size = 5)
socialcare_plot
socialcare_plot <- ggplot() +
geom_bar(data = la_rev_data_socialcare, aes(x = reorder(la_name, adult), y = adult, fill = la_type), stat = "identity") +
scale_y_continuous(name = "Spend £thousand", labels = comma) +
scale_x_discrete(name = "Local authority") +
#  facet_grid( ~ spend_type) +
theme_bw() +
theme(axis.text.x=element_text(angle=45,hjust=1,size=4))
socialcare_plot
socialcare_plot <- ggplot() +
geom_bar(data = la_rev_data_socialcare, aes(x = reorder(la_name, adult), y = adult, fill = la_type), stat = "identity") +
scale_y_continuous(name = "Spend £thousand", labels = comma) +
scale_x_discrete(name = "Local authority") +
#  facet_grid( ~ spend_type) +
theme_bw() +
theme(axis.text.x=element_text(angle=45,hjust=1,size=5))
socialcare_plot
socialcare_plot <- ggplot() +
geom_bar(data = la_rev_data_socialcare, aes(x = reorder(la_name, adult), y = adult, fill = la_type), stat = "identity") +
scale_y_continuous(name = "Spend £thousand", labels = comma) +
scale_x_discrete(name = "Local authority") +
#  facet_grid( ~ spend_type) +
theme_bw() +
theme(axis.text.x=element_text(angle=90,hjust=1,size=5))
socialcare_plot
socialcare_plot <- ggplot() +
geom_bar(data = la_rev_data_socialcare, aes(x = reorder(la_name, adult), y = adult, fill = la_type), stat = "identity") +
scale_y_continuous(name = "Spend £thousand", labels = comma) +
scale_x_discrete(name = "Local authority") +
#  facet_grid( ~ spend_type) +
theme_bw() +
theme(axis.text.x=element_text(angle=60,hjust=1,size=5))
socialcare_plot
highlight = function(x, pat, color="black", family="") {
ifelse(grepl(pat, x), glue("<b style='font-family:{family}; color:{color}'>{x}</b>"), x)
}
socialcare_plot <- ggplot() +
geom_bar(data = la_rev_data_socialcare, aes(x = reorder(la_name, adult), y = adult, fill = la_type), stat = "identity") +
scale_y_continuous(name = "Spend £thousand", labels = comma) +
scale_x_discrete(name = "Local authority", labels= function(x) highlight(x, "Dorset UA|Bournemouth, Christchurch and Poole UA", "red")) +
theme_bw() +
theme(axis.text.x=element_text(angle=60,hjust=1,size=5))
socialcare_plot
# Use pacman to install (if req) and load required packages
pacman::p_load(
readxl,
tidyr,
ggplot2,
dplyr,
zoo,
data.table,
scales,
glue
)
highlight = function(x, pat, color="black", family="") {
ifelse(grepl(pat, x), glue("<b style='font-family:{family}; color:{color}'>{x}</b>"), x)
}
socialcare_plot <- ggplot() +
geom_bar(data = la_rev_data_socialcare, aes(x = reorder(la_name, adult), y = adult, fill = la_type), stat = "identity") +
scale_y_continuous(name = "Spend £thousand", labels = comma) +
scale_x_discrete(name = "Local authority", labels= function(x) highlight(x, "Dorset UA|Bournemouth, Christchurch and Poole UA", "red")) +
theme_bw() +
theme(axis.text.x=element_text(angle=60,hjust=1,size=5))
socialcare_plot
socialcare_plot <- ggplot() +
geom_bar(data = la_rev_data_socialcare, aes(x = reorder(la_name, adult), y = adult, fill = la_type), stat = "identity") +
scale_y_continuous(name = "Spend £thousand", labels = comma) +
scale_x_discrete(name = "Local authority", labels= function(x) highlight(x, "Dorset UA|Bournemouth, Christchurch and Poole UA", "red")) +
theme_bw() +
theme(axis.text.x=element_html(angle=60,hjust=1,size=5))
socialcare_plot <- ggplot() +
geom_bar(data = la_rev_data_socialcare, aes(x = reorder(la_name, adult), y = adult, fill = la_type), stat = "identity") +
scale_y_continuous(name = "Spend £thousand", labels = comma) +
scale_x_discrete(name = "Local authority", labels= function(x) highlight(x, "Dorset UA|Bournemouth, Christchurch and Poole UA", "red")) +
theme_bw() +
theme(axis.text.x=element_markdown(angle=60,hjust=1,size=5))
# Use pacman to install (if req) and load required packages
pacman::p_load(
readxl,
tidyr,
ggplot2,
dplyr,
zoo,
data.table,
scales,
glue,
ggtext
)
socialcare_plot <- ggplot() +
geom_bar(data = la_rev_data_socialcare, aes(x = reorder(la_name, adult), y = adult, fill = la_type), stat = "identity") +
scale_y_continuous(name = "Spend £thousand", labels = comma) +
scale_x_discrete(name = "Local authority", labels= function(x) highlight(x, "Dorset UA|Bournemouth, Christchurch and Poole UA", "red")) +
theme_bw() +
theme(axis.text.x=element_markdown(angle=60,hjust=1,size=5))
socialcare_plot
socialcare_plot <- ggplot() +
geom_bar(data = la_rev_data_socialcare, aes(x = reorder(la_name, adult), y = adult, fill = la_type), stat = "identity") +
scale_y_continuous(name = "Spend £thousand", labels = comma) +
scale_x_discrete(name = "Local authority", labels= function(x) highlight(x, "Dorset UA|Bournemouth, Christchurch and Poole UA", "red4")) +
theme_bw() +
theme(axis.text.x=element_markdown(angle=60,hjust=1,size=5))
socialcare_plot
socialcare_plot <- ggplot() +
geom_bar(data = la_rev_data_socialcare, aes(x = reorder(la_name, adult), y = adult, fill = la_type), stat = "identity") +
scale_y_continuous(name = "Spend £thousand", labels = comma) +
scale_x_discrete(name = "Local authority", labels= function(x) highlight(x, "Dorset UA|Bournemouth, Christchurch and Poole UA", "red3")) +
theme_bw() +
theme(axis.text.x=element_markdown(angle=60,hjust=1,size=5))
socialcare_plot
socialcare_plot <- ggplot() +
geom_bar(data = la_rev_data_socialcare, aes(x = reorder(la_name, adult), y = adult, fill = la_type), stat = "identity") +
scale_y_continuous(name = "Spend £thousand", labels = comma) +
scale_x_discrete(name = "Local authority", labels= function(x) highlight(x, "Dorset UA|Bournemouth, Christchurch and Poole UA", "red3")) +
scale_fill_discrete(name = "LA type", labels = c("London borough", "Metropolitan district", "County", "Unitary authority")) +
theme_bw() +
theme(axis.text.x=element_markdown(angle=60,hjust=1,size=5))
socialcare_plot
socialcare_plot <- ggplot() +
geom_bar(data = la_rev_data_socialcare, aes(x = reorder(la_name, adult), y = adult, fill = la_type), stat = "identity") +
scale_y_continuous(name = "Spend £thousand", labels = comma) +
scale_x_discrete(name = "Local authority", labels= function(x) highlight(x, "Dorset UA|Bournemouth, Christchurch and Poole UA", "red3")) +
scale_fill_discrete(name = "LA type", labels = c("London borough", "Metropolitan district", "County council", "Unitary authority")) +
theme_bw() +
theme(axis.text.x=element_markdown(angle=60,hjust=1,size=5))
socialcare_plot
socialcare_plot <- ggplot() +
geom_bar(data = la_rev_data_socialcare, aes(x = reorder(la_name, adult), y = adult, fill = la_type), stat = "identity") +
scale_y_continuous(name = "Spend £thousand", labels = comma) +
scale_x_discrete(name = "Local authority", labels= function(x) highlight(x, "Dorset UA|Bournemouth, Christchurch and Poole UA", "red3")) +
scale_fill_discrete(name = "LA type", labels = c("London borough", "Metropolitan district", "County council", "Unitary authority")) +
ggtitle("Local authority adult social services spend 2020-21") +
theme_bw() +
theme(axis.text.x=element_markdown(angle=60,hjust=1,size=5))
socialcare_plot
socialcare_plot <- ggplot() +
geom_bar(data = la_rev_data_socialcare, aes(x = reorder(la_name, adult), y = adult, fill = la_type), stat = "identity") +
scale_y_continuous(name = "Spend £thousand", labels = comma) +
scale_x_discrete(name = "Local authority", labels= function(x) highlight(x, "Dorset UA|Bournemouth, Christchurch and Poole UA", "red3")) +
scale_fill_discrete(name = "LA type", labels = c("London borough", "Metropolitan district", "County council", "Unitary authority")) +
ggtitle("Local authority adult social services spend 2020-21", subtitle = "Data from https://www.gov.uk/government/collections/local-authority-revenue-expenditure-and-financing") +
theme_bw() +
theme(axis.text.x=element_markdown(angle=60,hjust=1,size=5))
socialcare_plot
# set working directory
setwd("~/Documents/GitHub/dorset_covid")
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
ggplot2,
tidyr,
reshape
)
vaccs_percentage_dor <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=ltla&areaCode=E06000059&metric=cumVaccinationFirstDoseUptakeByVaccinationDatePercentage&metric=cumVaccinationSecondDoseUptakeByVaccinationDatePercentage&format=csv"))
vaccs_percentage_bcp <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=ltla&areaCode=E06000058&metric=cumVaccinationFirstDoseUptakeByVaccinationDatePercentage&metric=cumVaccinationSecondDoseUptakeByVaccinationDatePercentage&format=csv"))
View(vaccs_percentage_bcp)
View(vaccs_percentage_dor)
vaccs_percentage_dor <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=ltla&areaCode=E06000059&metric=cumVaccinationFirstDoseUptakeByVaccinationDatePercentage&metric=cumVaccinationSecondDoseUptakeByVaccinationDatePercentage&metric=cumVaccinationThirdInjectionUptakeByPublishDatePercentage
&format=csv"))
vaccs_percentage_dor <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=ltla&areaCode=E06000059&metric=cumVaccinationFirstDoseUptakeByVaccinationDatePercentage&metric=cumVaccinationSecondDoseUptakeByVaccinationDatePercentage&metric=cumVaccinationThirdInjectionUptakeByPublishDatePercentage&format=csv"))
vaccs_percentage_bcp <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=ltla&areaCode=E06000058&metric=cumVaccinationFirstDoseUptakeByVaccinationDatePercentage&metric=cumVaccinationSecondDoseUptakeByVaccinationDatePercentage&metric=cumVaccinationThirdInjectionUptakeByPublishDatePercentage&format=csv"))
View(vaccs_percentage_bcp)
View(vaccs_percentage_dor)
vaccs_percentage_dor <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=ltla&areaCode=E06000059&metric=cumVaccinationFirstDoseUptakeByVaccinationDatePercentage&metric=cumVaccinationSecondDoseUptakeByVaccinationDatePercentage&format=csv"))
vaccs_percentage_bcp <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=ltla&areaCode=E06000058&metric=cumVaccinationFirstDoseUptakeByVaccinationDatePercentage&metric=cumVaccinationSecondDoseUptakeByVaccinationDatePercentage&format=csv"))
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
ggplot2,
dplyr,
zoo,
reshape2,
lubridate,
plotly
)
covid_cases_age_dor <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=ltla&areaCode=E06000059&metric=newCasesBySpecimenDateAgeDemographics&format=csv"))
covid_cases_age_bcp <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=ltla&areaCode=E06000058&metric=newCasesBySpecimenDateAgeDemographics&format=csv"))
# combine datasets at this point
covid_cases_age_combined <- rbind(covid_cases_age_bcp, covid_cases_age_dor)
# remove rows we don't want
covid_cases_age_combined <- subset(covid_cases_age_combined, age!="00_59")
covid_cases_age_combined <- subset(covid_cases_age_combined, age!="60+")
covid_cases_age_combined <- subset(covid_cases_age_combined, age!="unassigned")
# restrict data to last two months and remove columns we don't want
covid_cases_age_combined <- subset(covid_cases_age_combined, date > today() - months(1), select = c("areaName", "date", "age", "cases"))
# define the date format
covid_cases_age_combined$date = as.Date(covid_cases_age_combined$date, "%Y-%m-%d")
# create plot and geom
covid_cases_age_plot <- ggplot() +
geom_line(data = covid_cases_age_combined, aes(x = date, y = cases, col = age), size = 0.5) +
xlab("Date") +
ylab("New cases") +
labs(color = "Age bands") +
ggtitle("Dorset - new covid cases by age group", subtitle = paste("Data from Public Health England / https://coronavirus.data.gov.uk. Plotted", Sys.time(), sep = " ")) +
facet_grid( ~ areaName) +
theme_bw()
covid_cases_age_plot
# create dynamic plot
covid_cases_age_dynamic_plot <- ggplotly(covid_cases_age_plot)
covid_cases_age_dynamic_plot
# save to daily file
orca(covid_cases_msoa_dynamic_plot, file = "dorset_age_cases.png")
htmlwidgets::saveWidget(as_widget(covid_cases_msoa_dynamic_plot), "age_cases.html")
# save to daily file
orca(covid_cases_age_dynamic_plot, file = "dorset_age_cases.png")
htmlwidgets::saveWidget(as_widget(covid_cases_age_dynamic_plot), "age_cases.html")
# set working directory
setwd("~/Documents/GitHub/dorset_covid")
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
ggplot2,
dplyr,
zoo,
reshape2,
plotly,
webshot
)
covid_cases_msoa_dor <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=msoa&areaCode=E06000059&metric=newCasesBySpecimenDateRollingRate&format=csv"))
covid_cases_msoa_bcp <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=msoa&areaCode=E06000058&metric=newCasesBySpecimenDateRollingRate&format=csv"))
#combine datasets at this point
covid_cases_msoa_combined <- rbind(covid_cases_msoa_bcp, covid_cases_msoa_dor)
# remove data we don't want
covid_cases_msoa_combined <- subset(covid_cases_msoa_combined, date > "2021-09-01", select = c("UtlaName", "areaName", "date", "newCasesBySpecimenDateRollingRate"))
# define the date format
covid_cases_msoa_combined$date = as.Date(covid_cases_msoa_combined$date, "%Y-%m-%d")
# create plot and geom
covid_cases_msoa_plot <- ggplot() +
geom_smooth(data = covid_cases_msoa_combined, aes(x = date, y = newCasesBySpecimenDateRollingRate, col = areaName), size = 0.5) +
geom_point(data = covid_cases_msoa_combined, aes(x = date, y = newCasesBySpecimenDateRollingRate, col = areaName, text = paste("MSOA:", areaName, "<br>Rate:", newCasesBySpecimenDateRollingRate, "<br>Date:", date)), size = 1) +
xlab("Date") +
ylab("New cases by specimen date rolling rate") +
labs(color = "MSOAs") +
ggtitle("Dorset MSOAs - weekly covid rolling rate", subtitle = paste("Data from Public Health England / https://coronavirus.data.gov.uk. Plotted", Sys.time(), sep = " "))
# create dynamic plot
covid_cases_msoa_plot
covid_cases_msoa_dynamic_plot <- ggplotly(covid_cases_msoa_plot, tooltip = c("text"))
covid_cases_msoa_dynamic_plot
# create plot and geom
covid_cases_msoa_plot <- ggplot() +
geom_line(data = covid_cases_msoa_combined, aes(x = date, y = newCasesBySpecimenDateRollingRate, col = areaName), size = 0.5) +
geom_point(data = covid_cases_msoa_combined, aes(x = date, y = newCasesBySpecimenDateRollingRate, col = areaName, text = paste("MSOA:", areaName, "<br>Rate:", newCasesBySpecimenDateRollingRate, "<br>Date:", date)), size = 1) +
xlab("Date") +
ylab("New cases by specimen date rolling rate") +
labs(color = "MSOAs") +
ggtitle("Dorset MSOAs - weekly covid rolling rate", subtitle = paste("Data from Public Health England / https://coronavirus.data.gov.uk. Plotted", Sys.time(), sep = " "))
# create dynamic plot
covid_cases_msoa_plot
covid_cases_msoa_dynamic_plot <- ggplotly(covid_cases_msoa_plot, tooltip = c("text"))
covid_cases_msoa_dynamic_plot
# Use pacman to install (if req) and load required packages
pacman::p_load(
ggplot2,
dplyr,
zoo,
reshape2,
plotly,
webshot,
lubridate
)
covid_cases_msoa_dor <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=msoa&areaCode=E06000059&metric=newCasesBySpecimenDateRollingRate&format=csv"))
covid_cases_msoa_bcp <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=msoa&areaCode=E06000058&metric=newCasesBySpecimenDateRollingRate&format=csv"))
#combine datasets at this point
covid_cases_msoa_combined <- rbind(covid_cases_msoa_bcp, covid_cases_msoa_dor)
# remove data we don't want
covid_cases_msoa_combined <- subset(covid_cases_msoa_combined, date > today() - months(1), select = c("UtlaName", "areaName", "date", "newCasesBySpecimenDateRollingRate"))
# define the date format
covid_cases_msoa_combined$date = as.Date(covid_cases_msoa_combined$date, "%Y-%m-%d")
# create plot and geom
covid_cases_msoa_plot <- ggplot() +
geom_line(data = covid_cases_msoa_combined, aes(x = date, y = newCasesBySpecimenDateRollingRate, col = areaName), size = 0.5) +
geom_point(data = covid_cases_msoa_combined, aes(x = date, y = newCasesBySpecimenDateRollingRate, col = areaName, text = paste("MSOA:", areaName, "<br>Rate:", newCasesBySpecimenDateRollingRate, "<br>Date:", date)), size = 1) +
xlab("Date") +
ylab("New cases by specimen date rolling rate") +
labs(color = "MSOAs") +
ggtitle("Dorset MSOAs - weekly covid rolling rate", subtitle = paste("Data from Public Health England / https://coronavirus.data.gov.uk. Plotted", Sys.time(), sep = " "))
# create dynamic plot
covid_cases_msoa_plot
covid_cases_msoa_dynamic_plot <- ggplotly(covid_cases_msoa_plot, tooltip = c("text"))
covid_cases_msoa_dynamic_plot
# create plot and geom
covid_cases_msoa_plot <- ggplot() +
geom_smooth(data = covid_cases_msoa_combined, aes(x = date, y = newCasesBySpecimenDateRollingRate, col = areaName), size = 0.5, method = lm) +
geom_point(data = covid_cases_msoa_combined, aes(x = date, y = newCasesBySpecimenDateRollingRate, col = areaName, text = paste("MSOA:", areaName, "<br>Rate:", newCasesBySpecimenDateRollingRate, "<br>Date:", date)), size = 1) +
xlab("Date") +
ylab("New cases by specimen date rolling rate") +
labs(color = "MSOAs") +
ggtitle("Dorset MSOAs - weekly covid rolling rate", subtitle = paste("Data from Public Health England / https://coronavirus.data.gov.uk. Plotted", Sys.time(), sep = " "))
# create dynamic plot
covid_cases_msoa_plot
covid_cases_msoa_dynamic_plot <- ggplotly(covid_cases_msoa_plot, tooltip = c("text"))
covid_cases_msoa_dynamic_plot
# create plot and geom
covid_cases_msoa_plot <- ggplot() +
geom_smooth(data = covid_cases_msoa_combined, aes(x = date, y = newCasesBySpecimenDateRollingRate, col = areaName), size = 0.5, method = "loess") +
geom_point(data = covid_cases_msoa_combined, aes(x = date, y = newCasesBySpecimenDateRollingRate, col = areaName, text = paste("MSOA:", areaName, "<br>Rate:", newCasesBySpecimenDateRollingRate, "<br>Date:", date)), size = 1) +
xlab("Date") +
ylab("New cases by specimen date rolling rate") +
labs(color = "MSOAs") +
ggtitle("Dorset MSOAs - weekly covid rolling rate", subtitle = paste("Data from Public Health England / https://coronavirus.data.gov.uk. Plotted", Sys.time(), sep = " "))
# create dynamic plot
covid_cases_msoa_plot
covid_cases_msoa_dynamic_plot <- ggplotly(covid_cases_msoa_plot, tooltip = c("text"))
covid_cases_msoa_dynamic_plot
# save to daily file
orca(covid_cases_msoa_dynamic_plot, file = "dorset_msoa_cases.png")
htmlwidgets::saveWidget(as_widget(covid_cases_msoa_dynamic_plot), "msoa_cases.html")
# create plot and geom
covid_cases_age_plot <- ggplot() +
geom_smooth(data = covid_cases_age_combined, aes(x = date, y = cases, col = age), size = 0.5, method = "loess") +
xlab("Date") +
ylab("New cases") +
labs(color = "Age bands") +
ggtitle("Dorset - new covid cases by age group", subtitle = paste("Data from Public Health England / https://coronavirus.data.gov.uk. Plotted", Sys.time(), sep = " ")) +
facet_grid( ~ areaName) +
theme_bw()
covid_cases_age_plot
# create dynamic plot
covid_cases_age_dynamic_plot <- ggplotly(covid_cases_age_plot)
covid_cases_age_dynamic_plot
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
ggplot2,
dplyr,
zoo,
reshape2,
lubridate,
plotly
)
covid_cases_age_dor <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=ltla&areaCode=E06000059&metric=newCasesBySpecimenDateAgeDemographics&format=csv"))
covid_cases_age_bcp <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=ltla&areaCode=E06000058&metric=newCasesBySpecimenDateAgeDemographics&format=csv"))
# combine datasets at this point
covid_cases_age_combined <- rbind(covid_cases_age_bcp, covid_cases_age_dor)
# remove rows we don't want
covid_cases_age_combined <- subset(covid_cases_age_combined, age!="00_59")
covid_cases_age_combined <- subset(covid_cases_age_combined, age!="60+")
covid_cases_age_combined <- subset(covid_cases_age_combined, age!="unassigned")
# restrict data to last two months and remove columns we don't want
covid_cases_age_combined <- subset(covid_cases_age_combined, date > today() - months(1), select = c("areaName", "date", "age", "cases"))
# define the date format
covid_cases_age_combined$date = as.Date(covid_cases_age_combined$date, "%Y-%m-%d")
# create plot and geom
covid_cases_age_plot <- ggplot() +
geom_smooth(data = covid_cases_age_combined, aes(x = date, y = cases, col = age), size = 0.5, method = "loess") +
xlab("Date") +
ylab("New cases") +
labs(color = "Age bands") +
ggtitle("Dorset - new covid cases by age group", subtitle = paste("Data from Public Health England / https://coronavirus.data.gov.uk. Plotted", Sys.time(), sep = " ")) +
facet_grid( ~ areaName) +
theme_bw()
covid_cases_age_plot
# create plot and geom
covid_cases_age_plot <- ggplot() +
geom_smooth(data = covid_cases_age_combined, aes(x = date, y = cases, col = age), size = 0.5, se = F) +
xlab("Date") +
ylab("New cases") +
labs(color = "Age bands") +
ggtitle("Dorset - new covid cases by age group", subtitle = paste("Data from Public Health England / https://coronavirus.data.gov.uk. Plotted", Sys.time(), sep = " ")) +
facet_grid( ~ areaName) +
theme_bw()
covid_cases_age_plot
# create dynamic plot
covid_cases_age_dynamic_plot <- ggplotly(covid_cases_age_plot)
covid_cases_age_dynamic_plot
# save to daily file
orca(covid_cases_age_dynamic_plot, file = "dorset_age_cases.png")
# create plot and geom
covid_cases_age_plot <- ggplot() +
geom_smooth(data = covid_cases_age_combined, aes(x = date, y = cases, col = age), size = 0.5, se = F) +
geom_point(data = covid_cases_age_combined, aes(x = date, y = cases, col = age, text = paste("Age band:", age, "<br>Cases:", cases, "<br>Date:", date)), size = 1) +
xlab("Date") +
ylab("New cases") +
labs(color = "Age bands") +
ggtitle("Dorset - new covid cases by age group", subtitle = paste("Data from Public Health England / https://coronavirus.data.gov.uk. Plotted", Sys.time(), sep = " ")) +
facet_grid( ~ areaName) +
theme_bw()
covid_cases_age_plot
# create dynamic plot
covid_cases_age_dynamic_plot <- ggplotly(covid_cases_age_plot)
covid_cases_age_dynamic_plot
# create plot and geom
covid_cases_age_plot <- ggplot() +
geom_line(data = covid_cases_age_combined, aes(x = date, y = cases, col = age), size = 0.5, se = F) +
geom_point(data = covid_cases_age_combined, aes(x = date, y = cases, col = age, text = paste("Age band:", age, "<br>Cases:", cases, "<br>Date:", date)), size = 1) +
xlab("Date") +
ylab("New cases") +
labs(color = "Age bands") +
ggtitle("Dorset - new covid cases by age group", subtitle = paste("Data from Public Health England / https://coronavirus.data.gov.uk. Plotted", Sys.time(), sep = " ")) +
facet_grid( ~ areaName) +
theme_bw()
covid_cases_age_plot
# create plot and geom
covid_cases_age_plot <- ggplot() +
geom_smooth(data = covid_cases_age_combined, aes(x = date, y = cases, col = age), size = 0.5, se = F) +
geom_point(data = covid_cases_age_combined, aes(x = date, y = cases, col = age, text = paste("Age band:", age, "<br>Cases:", cases, "<br>Date:", date)), size = 1) +
xlab("Date") +
ylab("New cases") +
labs(color = "Age bands") +
ggtitle("Dorset - new covid cases by age group", subtitle = paste("Data from Public Health England / https://coronavirus.data.gov.uk. Plotted", Sys.time(), sep = " ")) +
facet_grid( ~ areaName) +
theme_bw()
covid_cases_age_plot
# create plot and geom
covid_cases_age_plot <- ggplot() +
geom_smooth(data = covid_cases_age_combined, aes(x = date, y = cases, col = age), size = 0.5) +
geom_point(data = covid_cases_age_combined, aes(x = date, y = cases, col = age, text = paste("Age band:", age, "<br>Cases:", cases, "<br>Date:", date)), size = 1) +
xlab("Date") +
ylab("New cases") +
labs(color = "Age bands") +
ggtitle("Dorset - new covid cases by age group", subtitle = paste("Data from Public Health England / https://coronavirus.data.gov.uk. Plotted", Sys.time(), sep = " ")) +
facet_grid( ~ areaName) +
theme_bw()
covid_cases_age_plot
# create plot and geom
covid_cases_age_plot <- ggplot() +
geom_line(data = covid_cases_age_combined, aes(x = date, y = cases, col = age), size = 0.5) +
geom_point(data = covid_cases_age_combined, aes(x = date, y = cases, col = age, text = paste("Age band:", age, "<br>Cases:", cases, "<br>Date:", date)), size = 1) +
xlab("Date") +
ylab("New cases") +
labs(color = "Age bands") +
ggtitle("Dorset - new covid cases by age group", subtitle = paste("Data from Public Health England / https://coronavirus.data.gov.uk. Plotted", Sys.time(), sep = " ")) +
facet_grid( ~ areaName) +
theme_bw()
covid_cases_age_plot
# create dynamic plot
covid_cases_age_dynamic_plot <- ggplotly(covid_cases_age_plot)
covid_cases_age_dynamic_plot
# save to daily file
orca(covid_cases_age_dynamic_plot, file = "dorset_age_cases.png")
htmlwidgets::saveWidget(as_widget(covid_cases_age_dynamic_plot), "age_cases.html")
# set working directory
setwd("~/Documents/GitHub/dorset_covid")
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
ggplot2,
dplyr,
zoo
)
covid_cases_csv <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=nation&areaCode=E92000001&metric=newCasesBySpecimenDate&format=csv"))
covid_cases_csv <- covid_cases_csv %>%
dplyr::mutate(cases_07da = zoo::rollmean(newCasesBySpecimenDate, k = 7, fill = NA))
covid_cases_csv$date = as.Date(covid_cases_csv$date, "%Y-%m-%d")
less_recent_days <- Sys.Date() - 5
less_seven_days <- less_recent_days - 7
# set working directory
setwd("~/Documents/GitHub/dorset_covid")
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
ggplot2,
dplyr,
zoo,
reshape2
)
covid_cases_dor <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=ltla&areaCode=E06000059&metric=newCasesBySpecimenDate&format=csv"))
covid_cases_bcp <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=ltla&areaCode=E06000058&metric=newCasesBySpecimenDate&format=csv"))
View(covid_cases_dor)
# apply a seven day rolling average to each table
covid_cases_dor <- covid_cases_dor %>%
dplyr::mutate(cases_07da_dor = zoo::rollmean(covid_cases_dor$newCasesBySpecimenDate, k = 7, fill = NA))
covid_cases_bcp <- covid_cases_bcp %>%
dplyr::mutate(cases_07da_bcp = zoo::rollmean(covid_cases_bcp$newCasesBySpecimenDate, k = 7, fill = NA))
# merge bcp and dorset tables into one
covid_cases_com <- merge(covid_cases_bcp, covid_cases_dor, by.x = "date", by.y = "date")
# remove old data we don't want
covid_cases_com <- subset(covid_cases_com, date > "2020-10-31", select = c("date", "cases_07da_bcp", "cases_07da_dor"))
covid_cases_com <- subset(covid_cases_com, date < less_recent_days)
# remove old data we don't want
less_recent_days <- Sys.Date() - 5
covid_cases_com <- subset(covid_cases_com, date < less_recent_days)
# convert wide data into long
melt.cases <- melt(covid_cases_com, id=c("date"), variable.name = "area", value.name = "cases")
# define the date format
melt.cases$date = as.Date(melt.cases$date, "%Y-%m-%d")
# create plot and geom
covid_cases_plot <- ggplot(melt.cases, aes(x = date, y = cases, col = area)) +
geom_point(shape = 1, size = 2) + scale_colour_manual(name = "Local authority", values = c("cases_07da_dor" = "green4", "cases_07da_bcp" = "darkmagenta"), labels = c("BCP", "Dorset")) +
labs(caption = paste("Data from Public Health England / https://coronavirus.data.gov.uk. Plotted", Sys.time(), sep = " "))
# set plot params
covid_cases_plot +
scale_y_continuous(trans = 'log10', breaks = c(5,10,20,50,100,200,500)) +
scale_x_date(date_labels = "%B %Y", date_breaks = "1 month") +
ggtitle("Dorset covid cases - 7 day average by specimen date (log scale)") +
xlab("Date") +
ylab("Cases") +
theme_bw()
# save to daily file
ggsave("daily_dorset_cases.png", width = 16.6, height = 8.65, units = "in")
