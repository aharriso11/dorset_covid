labs(caption = paste("Data from UK Health Security Agency and DLUHC / https://coronavirus.data.gov.uk. Plotted", Sys.time(), sep = " "),
subtitle = "Percentage of people aged 12 and over in a MSOA that have not yet received a first covid vaccination, plotted against the MSOA's deprivation score.") +
# theme and theme settings
theme_base() +
theme(
plot.title = element_text(size = 20, family = "Helvetica", face = "bold"),
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 11),
plot.caption = element_text(size = 10),
legend.text = element_text(size = 10),
legend.title = element_text(size = 12),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10))
# create plot
unvaxxed_plot
# save to daily file
ggsave("output/deprivation_dorset.png", width = 16.6, height = 8.65, units = "in")
# set working directory
setwd("~/Documents/GitHub/dorset_covid")
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
httr,
readxl,
readODS,
tidyverse,
zoo,
data.table,
scales,
glue,
ggtext,
ggthemes,
pals,
utils,
reshape,
lubridate
)
# set mobility reports zipfile path
zip_path <- "https://www.gstatic.com/covid19/mobility/Region_Mobility_Report_CSVs.zip"
# set downloaded file path and name for downloaded data
file_name <- "devel/Region_Mobility_Report_CSVs.zip"
# download the mobility report zipfile
GET(zip_path, write_disk(file_name, overwrite = TRUE))
# extract the GB data for 2021
unzip(file_name, files = c("2022_GB_Region_Mobility_Report.csv", "2021_GB_Region_Mobility_Report.csv", "2020_GB_Region_Mobility_Report.csv"), overwrite = TRUE, exdir = "./devel/")
# import GB data files
mobility2020 <- read.csv("devel/2020_GB_Region_Mobility_Report.csv")
mobility2021 <- read.csv("devel/2021_GB_Region_Mobility_Report.csv")
mobility2022 <- read.csv("devel/2022_GB_Region_Mobility_Report.csv")
# manually read in lockdown start and end
# data from https://www.instituteforgovernment.org.uk/charts/uk-government-coronavirus-lockdowns
# and https://commonslibrary.parliament.uk/research-briefings/cbp-9068/
# xmin denotes lockdown start, xmax denotes lockdown end
lockdowns <- data.frame(
xmin = c(as.Date(c("2020-03-23")), as.Date(c("2020-11-05")), as.Date(c("2021-01-06"))),
xmax = c(as.Date(c("2020-07-04")), as.Date(c("2020-12-02")), as.Date(c("2021-03-29"))),
ymin = c(-Inf, -Inf, -Inf),
ymax = c(Inf, Inf, Inf)
)
# merge datasets into one
# 1 - place datasets into a single list
mobility_list <- list(mobility2020, mobility2021, mobility2022)
# 2 - merge the datasets in the list into vaccs_combined
mobility_combined <- merge_recurse(mobility_list)
# define the date format
mobility_combined$date = as.Date(mobility_combined$date, "%Y-%m-%d")
# filter only the Dorset data
mobility_combined <- mobility_combined %>%
filter(sub_region_1 == "Dorset" & sub_region_2 == "")
# calculate seven day rolling average
mobility_combined <- mobility_combined %>%
mutate(ret_av = rollmean(retail_and_recreation_percent_change_from_baseline, k = 7, fill = NA)) %>%
mutate(gro_av = rollmean(grocery_and_pharmacy_percent_change_from_baseline, k = 7, fill = NA)) %>%
mutate(par_av = rollmean(parks_percent_change_from_baseline, k = 7, fill = NA)) %>%
mutate(tra_av = rollmean(transit_stations_percent_change_from_baseline, k = 7, fill = NA)) %>%
mutate(wor_av = rollmean(workplaces_percent_change_from_baseline, k = 7, fill = NA)) %>%
mutate(res_av = rollmean(residential_percent_change_from_baseline, k = 7, fill = NA))
# remove the columns we don't need
mobility_combined <- subset(mobility_combined, select = c("date", "sub_region_2", "ret_av", "gro_av", "par_av", "tra_av", "wor_av", "res_av"))
# rename the activity columns
names(mobility_combined)[names(mobility_combined) == "ret_av"] <- "Retail and recreation"
names(mobility_combined)[names(mobility_combined) == "gro_av"] <- "Grocery and pharmacy"
names(mobility_combined)[names(mobility_combined) == "par_av"] <- "Parks"
names(mobility_combined)[names(mobility_combined) == "tra_av"] <- "Public transport hubs"
names(mobility_combined)[names(mobility_combined) == "wor_av"] <- "Workplace"
names(mobility_combined)[names(mobility_combined) == "res_av"] <- "Residential"
# elongate the data
mobility_long <- gather(mobility_combined, activity, percent_change_from_baseline, "Retail and recreation":last_col(), na.rm = FALSE, convert = FALSE)
# create plot and geom
mobility_plot <- ggplot() +
# shaded areas to denote lockdowns
geom_rect(
data = lockdowns,
fill = "lightsteelblue1", alpha = 0.5,
aes(
xmin = xmin,
xmax = xmax,
ymin = ymin,
ymax = ymax
)
) +
# grey line to indicate baseline
geom_hline(yintercept = 0, colour = "black") +
# main data plot
geom_area(data = mobility_long, aes(x = date, y = percent_change_from_baseline), size = 0.75, colour = "springgreen4", fill = "#94d3b2", position = "stack") +
# text annotations to indicate lockdowns
# x value takes the start date from the lockdowns dataframe and adds twelve for positioning
annotate("text", x = lockdowns$xmin[1]+12, y = 250, label = "Lockdown 1", size = 2.5, colour = "darkblue", fontface = "bold", angle = 90) +
annotate("text", x = lockdowns$xmin[2]+12, y = 250, label = "Lockdown 2", size = 2.5, colour = "darkblue", fontface = "bold", angle = 90) +
annotate("text", x = lockdowns$xmin[3]+12, y = 250, label = "Lockdown 3", size = 2.5, colour = "darkblue", fontface = "bold", angle = 90) +
# facet by activity
facet_wrap(~ activity) +
# set scales
scale_x_date(date_labels = "%b %y", date_breaks = "3 months") +
scale_y_continuous(breaks = c(-50, 0, 50, 100, 150, 200, 250, 300)) +
# set axis labels
xlab("Date") +
ylab("Percentage change") +
# set title and subtitle
ggtitle("We're moving around in Dorset differently due to covid-19") +
labs(caption = paste("Data from Google community mobility reports / https://www.google.com/covid19/mobility. Lockdown dates from the Insitute for Government. Plotted", Sys.time(), sep = " ", "\nData plot by Andrew Harrison / https://aharriso11.github.io/dorset_covid"), subtitle = "How visits and lengths of stay at different places change compared to a pre-covid baseline (3rd Jan - 6th Feb 2020), calculated from Google account users who have opted in to location history features.<br>Shaded light blue areas indicate periods of national restrictions.") +
# set theme and customisations
theme_base() +
theme(
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 20, family = "Helvetica", face = "bold"),
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 11),
plot.caption = element_text(size = 8),
legend.text = element_text(size = 12),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 8),
strip.text.y = element_text(size = 9.5))
# run the plot
mobility_plot
# save to file
ggsave("output/mobility.png", width = 16.6, height = 8.65, units = "in")
# set working directory
setwd("~/Documents/GitHub/dorset_covid")
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
ggplot2,
dplyr,
zoo,
lubridate,
ggthemes,
ggtext
)
covid_cases_csv <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=nation&areaCode=E92000001&metric=newCasesBySpecimenDate&format=csv"))
# set the date format
covid_cases_csv$date = as.Date(covid_cases_csv$date, "%Y-%m-%d")
# calculate seven day rolling average
covid_cases_csv <- covid_cases_csv %>%
dplyr::mutate(cases_07da = zoo::rollmean(newCasesBySpecimenDate, k = 7, fill = NA))
# restrict to last twelve months
covid_cases_csv <- subset(covid_cases_csv, date>today() - months(12))
# remove most recent five days
less_recent_days <- Sys.Date() - 5
less_seven_days <- less_recent_days - 7
covid_cases_subset <- subset(covid_cases_csv, date < less_recent_days)
# set plot and geom
covid_cases_plot <- ggplot() +
# plot cases
geom_point(data = covid_cases_subset, aes(x = date, y = cases_07da), shape = 1, colour = "red", size = 2) +
# plot trend line
geom_smooth(data = subset(covid_cases_csv, covid_cases_csv$date >= less_seven_days), aes(x = date, y = cases_07da), method = "lm", colour = "black", size=0.5, fullrange=FALSE, se=FALSE) +
# set x and y axis
scale_y_continuous(trans = 'log10', breaks = c(1000,2000,5000,10000,20000,50000), position = "right") +
scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
xlab("Date") +
ylab("Cases") +
# set title, subtitle and caption
ggtitle("England covid cases - 7 day average by specimen date (log scale)") +
labs(caption = paste0("Data from UK Health Security Agency / https://coronavirus.data.gov.uk. Plotted ", Sys.time(), sep = " "), subtitle = paste0("Daily numbers of new cases (people who have had at least one positive COVID-19 test result). Data are shown by the date the sample was taken from the person being tested.")) +
# set theme
theme_base() +
theme(
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 12),
plot.caption = element_text(size = 11))
# create plot
covid_cases_plot
View(covid_cases_subset)
# get most recent 07da
latest07da <- head(covid_cases_subset$cases_07da,1)
# set plot and geom
covid_cases_plot <- ggplot() +
# plot cases
geom_point(data = covid_cases_subset, aes(x = date, y = cases_07da), shape = 1, colour = "red", size = 2) +
geom_hline(yintercept = latest07da, linetype = "dotted", colour = "red", size = 0.75) +
# plot trend line
geom_smooth(data = subset(covid_cases_csv, covid_cases_csv$date >= less_seven_days), aes(x = date, y = cases_07da), method = "lm", colour = "black", size=0.5, fullrange=FALSE, se=FALSE) +
# set x and y axis
scale_y_continuous(trans = 'log10', breaks = c(1000,2000,5000,10000,20000,50000), position = "right") +
scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
xlab("Date") +
ylab("Cases") +
# set title, subtitle and caption
ggtitle("England covid cases - 7 day average by specimen date (log scale)") +
labs(caption = paste0("Data from UK Health Security Agency / https://coronavirus.data.gov.uk. Plotted ", Sys.time(), sep = " "), subtitle = paste0("Daily numbers of new cases (people who have had at least one positive COVID-19 test result). Data are shown by the date the sample was taken from the person being tested.")) +
# set theme
theme_base() +
theme(
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 12),
plot.caption = element_text(size = 11))
# create plot
covid_cases_plot
# set plot and geom
covid_cases_plot <- ggplot() +
# plot cases
geom_point(data = covid_cases_subset, aes(x = date, y = cases_07da), shape = 1, colour = "red", size = 2) +
geom_hline(yintercept = latest07da, linetype = "dotted", colour = "red", size = 0.75) +
# plot trend line
geom_smooth(data = subset(covid_cases_csv, covid_cases_csv$date >= less_seven_days), aes(x = date, y = cases_07da), method = "lm", colour = "black", size=0.5, fullrange=FALSE, se=FALSE) +
# set x and y axis
scale_y_continuous(trans = 'log10', breaks = c(1000,2000,5000,10000,20000,50000,100000), position = "right") +
scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
xlab("Date") +
ylab("Cases") +
# set title, subtitle and caption
ggtitle("England covid cases - 7 day average by specimen date (log scale)") +
labs(caption = paste0("Data from UK Health Security Agency / https://coronavirus.data.gov.uk. Plotted ", Sys.time(), sep = " "), subtitle = paste0("Daily numbers of new cases (people who have had at least one positive COVID-19 test result). Data are shown by the date the sample was taken from the person being tested.")) +
# set theme
theme_base() +
theme(
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 12),
plot.caption = element_text(size = 11))
# create plot
covid_cases_plot
# set plot and geom
covid_cases_plot <- ggplot() +
# plot cases
geom_point(data = covid_cases_subset, aes(x = date, y = cases_07da), shape = 1, colour = "red", size = 2) +
geom_hline(yintercept = latest07da, linetype = "dotted", colour = "red", size = 0.75) +
# plot trend line
geom_smooth(data = subset(covid_cases_csv, covid_cases_csv$date >= less_seven_days), aes(x = date, y = cases_07da), method = "lm", colour = "black", size=0.5, fullrange=FALSE, se=FALSE) +
# set x and y axis
scale_y_continuous(trans = 'log10', breaks = c(1000,2000,5000,10000,20000,50000,90000), position = "right") +
scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
xlab("Date") +
ylab("Cases") +
# set title, subtitle and caption
ggtitle("England covid cases - 7 day average by specimen date (log scale)") +
labs(caption = paste0("Data from UK Health Security Agency / https://coronavirus.data.gov.uk. Plotted ", Sys.time(), sep = " "), subtitle = paste0("Daily numbers of new cases (people who have had at least one positive COVID-19 test result). Data are shown by the date the sample was taken from the person being tested.")) +
# set theme
theme_base() +
theme(
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 12),
plot.caption = element_text(size = 11))
# create plot
covid_cases_plot
# set plot and geom
covid_cases_plot <- ggplot() +
# plot cases
geom_point(data = covid_cases_subset, aes(x = date, y = cases_07da), shape = 1, colour = "red", size = 2) +
geom_hline(yintercept = latest07da, linetype = "dotted", colour = "red", size = 0.75) +
# plot trend line
geom_smooth(data = subset(covid_cases_csv, covid_cases_csv$date >= less_seven_days), aes(x = date, y = cases_07da), method = "lm", colour = "black", size=0.5, fullrange=FALSE, se=FALSE) +
# set x and y axis
scale_y_continuous(trans = 'log10', breaks = c(1000,2000,5000,10000,20000,50000,99000), position = "right") +
scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
xlab("Date") +
ylab("Cases") +
# set title, subtitle and caption
ggtitle("England covid cases - 7 day average by specimen date (log scale)") +
labs(caption = paste0("Data from UK Health Security Agency / https://coronavirus.data.gov.uk. Plotted ", Sys.time(), sep = " "), subtitle = paste0("Daily numbers of new cases (people who have had at least one positive COVID-19 test result). Data are shown by the date the sample was taken from the person being tested.")) +
# set theme
theme_base() +
theme(
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 12),
plot.caption = element_text(size = 11))
# create plot
covid_cases_plot
# set plot and geom
covid_cases_plot <- ggplot() +
# plot cases
geom_point(data = covid_cases_subset, aes(x = date, y = cases_07da), shape = 1, colour = "red", size = 2) +
geom_hline(yintercept = latest07da, linetype = "dotted", colour = "red", size = 0.75) +
# plot trend line
geom_smooth(data = subset(covid_cases_csv, covid_cases_csv$date >= less_seven_days), aes(x = date, y = cases_07da), method = "lm", colour = "black", size=0.5, fullrange=FALSE, se=FALSE) +
# set x and y axis
scale_y_continuous(trans = 'log10', breaks = c(1000,2000,5000,10000,20000,50000,100000), position = "right") +
scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
xlab("Date") +
ylab("Cases") +
# set title, subtitle and caption
ggtitle("England covid cases - 7 day average by specimen date (log scale)") +
labs(caption = paste0("Data from UK Health Security Agency / https://coronavirus.data.gov.uk. Plotted ", Sys.time(), sep = " "), subtitle = paste0("Daily numbers of new cases (people who have had at least one positive COVID-19 test result). Data are shown by the date the sample was taken from the person being tested.")) +
# set theme
theme_base() +
theme(
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 12),
plot.caption = element_text(size = 11))
# create plot
covid_cases_plot
options("scipen"=10)
# set plot and geom
covid_cases_plot <- ggplot() +
# plot cases
geom_point(data = covid_cases_subset, aes(x = date, y = cases_07da), shape = 1, colour = "red", size = 2) +
geom_hline(yintercept = latest07da, linetype = "dotted", colour = "red", size = 0.75) +
# plot trend line
geom_smooth(data = subset(covid_cases_csv, covid_cases_csv$date >= less_seven_days), aes(x = date, y = cases_07da), method = "lm", colour = "black", size=0.5, fullrange=FALSE, se=FALSE) +
# set x and y axis
scale_y_continuous(trans = 'log10', breaks = c(1000,2000,5000,10000,20000,50000,100000), position = "right") +
scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
xlab("Date") +
ylab("Cases") +
# set title, subtitle and caption
ggtitle("England covid cases - 7 day average by specimen date (log scale)") +
labs(caption = paste0("Data from UK Health Security Agency / https://coronavirus.data.gov.uk. Plotted ", Sys.time(), sep = " "), subtitle = paste0("Daily numbers of new cases (people who have had at least one positive COVID-19 test result). Data are shown by the date the sample was taken from the person being tested.")) +
# set theme
theme_base() +
theme(
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 12),
plot.caption = element_text(size = 11))
# create plot
covid_cases_plot
# set plot and geom
covid_cases_plot <- ggplot() +
# plot cases
geom_point(data = covid_cases_subset, aes(x = date, y = cases_07da), shape = 1, colour = "red", size = 2) +
geom_hline(yintercept = latest07da, linetype = "dotted", colour = "red", size = 0.75) +
# plot trend line
geom_smooth(data = subset(covid_cases_csv, covid_cases_csv$date >= less_seven_days), aes(x = date, y = cases_07da), method = "lm", colour = "black", size=0.5, fullrange=FALSE, se=FALSE) +
# set x and y axis
scale_y_continuous(trans = 'log10', breaks = c(1000,2000,5000,10000,20000,50000,120000), position = "right") +
scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
xlab("Date") +
ylab("Cases") +
# set title, subtitle and caption
ggtitle("England covid cases - 7 day average by specimen date (log scale)") +
labs(caption = paste0("Data from UK Health Security Agency / https://coronavirus.data.gov.uk. Plotted ", Sys.time(), sep = " "), subtitle = paste0("Daily numbers of new cases (people who have had at least one positive COVID-19 test result). Data are shown by the date the sample was taken from the person being tested.")) +
# set theme
theme_base() +
theme(
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 12),
plot.caption = element_text(size = 11))
# create plot
covid_cases_plot
# set plot and geom
covid_cases_plot <- ggplot() +
# plot cases
geom_point(data = covid_cases_subset, aes(x = date, y = cases_07da), shape = 1, colour = "red", size = 2) +
geom_hline(yintercept = latest07da, linetype = "dotted", colour = "red", size = 0.75) +
# plot trend line
geom_smooth(data = subset(covid_cases_csv, covid_cases_csv$date >= less_seven_days), aes(x = date, y = cases_07da), method = "lm", colour = "black", size=0.5, fullrange=FALSE, se=FALSE) +
# set x and y axis
scale_y_continuous(trans = 'log10', breaks = c(1000,2000,5000,10000,20000,50000), position = "right") +
scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
xlab("Date") +
ylab("Cases") +
# set title, subtitle and caption
ggtitle("England covid cases - 7 day average by specimen date (log scale)") +
labs(caption = paste0("Data from UK Health Security Agency / https://coronavirus.data.gov.uk. Plotted ", Sys.time(), sep = " "), subtitle = paste0("Daily numbers of new cases (people who have had at least one positive COVID-19 test result). Data are shown by the date the sample was taken from the person being tested.")) +
# set theme
theme_base() +
theme(
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 12),
plot.caption = element_text(size = 11))
# create plot
covid_cases_plot
# set working directory
setwd("~/Documents/GitHub/dorset_covid")
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
ggplot2,
dplyr,
zoo,
reshape2,
lubridate,
ggtext,
ggthemes
)
covid_cases_dor <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=ltla&areaCode=E06000059&metric=newCasesBySpecimenDate&format=csv"))
covid_cases_bcp <- read.csv(url("https://api.coronavirus.data.gov.uk/v2/data?areaType=ltla&areaCode=E06000058&metric=newCasesBySpecimenDate&format=csv"))
# apply a seven day rolling average to each table
covid_cases_dor <- covid_cases_dor %>%
dplyr::mutate(cases_07da_dor = zoo::rollmean(covid_cases_dor$newCasesBySpecimenDate, k = 7, fill = NA))
covid_cases_bcp <- covid_cases_bcp %>%
dplyr::mutate(cases_07da_bcp = zoo::rollmean(covid_cases_bcp$newCasesBySpecimenDate, k = 7, fill = NA))
# merge bcp and dorset tables into one
covid_cases_com <- merge(covid_cases_bcp, covid_cases_dor, by.x = "date", by.y = "date")
# remove old data we don't want
less_recent_days <- Sys.Date() - 5
covid_cases_com <- subset(covid_cases_com, date > today() - months(12), select = c("date", "cases_07da_bcp", "cases_07da_dor"))
covid_cases_com <- subset(covid_cases_com, date < less_recent_days)
# convert wide data into long
melt.cases <- melt(covid_cases_com, id=c("date"), variable.name = "area", value.name = "cases")
# define the date format
melt.cases$date = as.Date(melt.cases$date, "%Y-%m-%d")
View(melt.cases)
latest_dor <- melt.cases %>%
filter(area=="cases_07da_dor")
View(latest_dor)
latest_dor <- melt.cases %>%
filter(area=="cases_07da_dor") %>%
tail(latest_dor$cases,1)
latest_dor <- melt.cases %>%
filter(area=="cases_07da_dor") %>%
tail(1)
View(latest_dor)
latest_dor <- melt.cases %>%
filter(area=="cases_07da_dor") %>%
tail(1) %>%
subset(cases)
latest_dor <- melt.cases %>%
filter(area=="cases_07da_dor") %>%
tail(1)
# get latest bcp figure
latest_bcp <- melt.cases %>%
filter(area=="cases_07da_bcp") %>%
tail(1)
# create plot and geom
covid_cases_plot <- ggplot() +
geom_point(data = melt.cases, aes(x = date, y = cases, col = area), shape = 1, size = 2, show.legend = FALSE) +
geom_hline(yintercept = latest_dor$cases, linetype = "dotted", colour = "green4", size = 0.75) +
scale_colour_manual(name = "Local authority", values = c("cases_07da_dor" = "green4", "cases_07da_bcp" = "magenta4"), labels = c("BCP", "Dorset")) +
labs(caption = paste("Data from UK Health Security Agency / https://coronavirus.data.gov.uk. Plotted", Sys.time(), sep = " "), subtitle = paste0("Daily numbers of new cases (people who have had at least one positive COVID-19 test result) in <span style='color:green4;'>Dorset</span> and <span style='color:magenta4;'>BCP</span>. Data are shown by the date the sample was taken from <br>the person being tested.")) +
scale_y_continuous(position = "right") +
scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
ggtitle("Dorset covid cases - 7 day average by specimen date (linear scale)") +
xlab("Date") +
ylab("Cases") +
theme_base() +
theme(
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 12),
plot.caption = element_text(size = 11))
covid_cases_plot
# create plot and geom
covid_cases_plot <- ggplot() +
geom_point(data = melt.cases, aes(x = date, y = cases, col = area), shape = 1, size = 2, show.legend = FALSE) +
geom_hline(yintercept = latest_dor$cases, linetype = "dotted", colour = "green4", size = 0.75) +
geom_hline(yintercept = latest_bcp$cases, linetype = "dotted", colour = "magenta4", size = 0.75) +
scale_colour_manual(name = "Local authority", values = c("cases_07da_dor" = "green4", "cases_07da_bcp" = "magenta4"), labels = c("BCP", "Dorset")) +
labs(caption = paste("Data from UK Health Security Agency / https://coronavirus.data.gov.uk. Plotted", Sys.time(), sep = " "), subtitle = paste0("Daily numbers of new cases (people who have had at least one positive COVID-19 test result) in <span style='color:green4;'>Dorset</span> and <span style='color:magenta4;'>BCP</span>. Data are shown by the date the sample was taken from <br>the person being tested.")) +
scale_y_continuous(position = "right") +
scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
ggtitle("Dorset covid cases - 7 day average by specimen date (linear scale)") +
xlab("Date") +
ylab("Cases") +
theme_base() +
theme(
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 12),
plot.caption = element_text(size = 11))
covid_cases_plot
# set working directory
setwd("~/Documents/GitHub/dorset_covid")
# set technical briefing spreadsheet path
sheet_path <- "https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/1054318/variants-of-concern-technical-briefing-36-data-england-11-February-2022_vfinal.ods"
# set plot title
plot_subtitle <- "Variant prevalence for all England available sequenced cases from 1 February 2021 as of 7 February 2022"
# set plot caption
plot_caption <- "Data from UK Health Security Agency technical briefing 36 (gateway number GOV-11306)."
# set file name
file_name <- "devel/techreport36.ods"
# Install the pacman package to call all the other packages
if (!require("pacman")) install.packages("pacman")
# Use pacman to install (if req) and load required packages
pacman::p_load(
httr,
readxl,
readODS,
tidyr,
ggplot2,
dplyr,
zoo,
data.table,
scales,
glue,
ggtext,
ggthemes,
pals
)
GET(sheet_path, write_disk(file_name, overwrite = TRUE))
# Import raw data from Excel
covid_variant_data <- read_ods(file_name, sheet = "Fig2", skip = 2)
# set the date format
covid_variant_data$week = as.Date(covid_variant_data$week, "%d/%m/%Y")
# convert wide data to long
covid_variant_data <- gather(covid_variant_data, variant, case_prevelance, -c(week))
View(covid_variant_data)
# create plot and geom
covid_variant_plot <- ggplot() +
# plot data in a stacked format
geom_area(data = covid_variant_data, aes(x = week, y = case_prevelance, group = variant, fill = variant), position = "stack") +
# scale settings
scale_fill_manual(name = "Variant", values = as.vector(tableau20(20))) +
scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
# axis settings
xlab("Month") +
ylab("Case prevelance percentage") +
# titles
ggtitle("Covid variant prevalence in England") +
labs(caption = paste0(plot_caption," Plotted", Sys.time(), sep = " "), subtitle = paste0(plot_subtitle)) +
# set theme
theme_base() +
theme(
plot.title = element_text(size = 20, family = "Helvetica", face = "bold"),
plot.subtitle = element_markdown(hjust = 0, vjust = 0, size = 11),
plot.caption = element_text(size = 10))
covid_variant_plot
# save to daily file
ggsave("output/england_variants.png", width = 16.6, height = 8.65, units = "in")
source("~/Documents/GitHub/dorset_covid/scripts/covid dorset cases.R", echo=TRUE)
